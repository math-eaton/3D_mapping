{
  "version": 3,
  "sources": ["../../convex-hull/lib/ch1d.js", "../../two-product/two-product.js", "../../robust-sum/robust-sum.js", "../../two-sum/two-sum.js", "../../robust-scale/robust-scale.js", "../../robust-subtract/robust-diff.js", "../../robust-orientation/orientation.js", "../../monotone-convex-hull-2d/index.js", "../../convex-hull/lib/ch2d.js", "../../bit-twiddle/twiddle.js", "../../union-find/index.js", "../../simplicial-complex/topology.js", "../../incremental-convex-hull/ich.js", "../../affine-hull/aff.js", "../../convex-hull/lib/chnd.js", "../../convex-hull/ch.js"],
  "sourcesContent": ["\"use strict\"\n\nmodule.exports = convexHull1d\n\nfunction convexHull1d(points) {\n  var lo = 0\n  var hi = 0\n  for(var i=1; i<points.length; ++i) {\n    if(points[i][0] < points[lo][0]) {\n      lo = i\n    }\n    if(points[i][0] > points[hi][0]) {\n      hi = i\n    }\n  }\n  if(lo < hi) {\n    return [[lo], [hi]]\n  } else if(lo > hi) {\n    return [[hi], [lo]]\n  } else {\n    return [[lo]]\n  }\n}", "\"use strict\"\n\nmodule.exports = twoProduct\n\nvar SPLITTER = +(Math.pow(2, 27) + 1.0)\n\nfunction twoProduct(a, b, result) {\n  var x = a * b\n\n  var c = SPLITTER * a\n  var abig = c - a\n  var ahi = c - abig\n  var alo = a - ahi\n\n  var d = SPLITTER * b\n  var bbig = d - b\n  var bhi = d - bbig\n  var blo = b - bhi\n\n  var err1 = x - (ahi * bhi)\n  var err2 = err1 - (alo * bhi)\n  var err3 = err2 - (ahi * blo)\n\n  var y = alo * blo - err3\n\n  if(result) {\n    result[0] = y\n    result[1] = x\n    return result\n  }\n\n  return [ y, x ]\n}", "\"use strict\"\n\nmodule.exports = linearExpansionSum\n\n//Easy case: Add two scalars\nfunction scalarScalar(a, b) {\n  var x = a + b\n  var bv = x - a\n  var av = x - bv\n  var br = b - bv\n  var ar = a - av\n  var y = ar + br\n  if(y) {\n    return [y, x]\n  }\n  return [x]\n}\n\nfunction linearExpansionSum(e, f) {\n  var ne = e.length|0\n  var nf = f.length|0\n  if(ne === 1 && nf === 1) {\n    return scalarScalar(e[0], f[0])\n  }\n  var n = ne + nf\n  var g = new Array(n)\n  var count = 0\n  var eptr = 0\n  var fptr = 0\n  var abs = Math.abs\n  var ei = e[eptr]\n  var ea = abs(ei)\n  var fi = f[fptr]\n  var fa = abs(fi)\n  var a, b\n  if(ea < fa) {\n    b = ei\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n      ea = abs(ei)\n    }\n  } else {\n    b = fi\n    fptr += 1\n    if(fptr < nf) {\n      fi = f[fptr]\n      fa = abs(fi)\n    }\n  }\n  if((eptr < ne && ea < fa) || (fptr >= nf)) {\n    a = ei\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n      ea = abs(ei)\n    }\n  } else {\n    a = fi\n    fptr += 1\n    if(fptr < nf) {\n      fi = f[fptr]\n      fa = abs(fi)\n    }\n  }\n  var x = a + b\n  var bv = x - a\n  var y = b - bv\n  var q0 = y\n  var q1 = x\n  var _x, _bv, _av, _br, _ar\n  while(eptr < ne && fptr < nf) {\n    if(ea < fa) {\n      a = ei\n      eptr += 1\n      if(eptr < ne) {\n        ei = e[eptr]\n        ea = abs(ei)\n      }\n    } else {\n      a = fi\n      fptr += 1\n      if(fptr < nf) {\n        fi = f[fptr]\n        fa = abs(fi)\n      }\n    }\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    }\n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n  }\n  while(eptr < ne) {\n    a = ei\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    }\n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n    }\n  }\n  while(fptr < nf) {\n    a = fi\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    } \n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n    fptr += 1\n    if(fptr < nf) {\n      fi = f[fptr]\n    }\n  }\n  if(q0) {\n    g[count++] = q0\n  }\n  if(q1) {\n    g[count++] = q1\n  }\n  if(!count) {\n    g[count++] = 0.0  \n  }\n  g.length = count\n  return g\n}", "\"use strict\"\n\nmodule.exports = fastTwoSum\n\nfunction fastTwoSum(a, b, result) {\n\tvar x = a + b\n\tvar bv = x - a\n\tvar av = x - bv\n\tvar br = b - bv\n\tvar ar = a - av\n\tif(result) {\n\t\tresult[0] = ar + br\n\t\tresult[1] = x\n\t\treturn result\n\t}\n\treturn [ar+br, x]\n}", "\"use strict\"\n\nvar twoProduct = require(\"two-product\")\nvar twoSum = require(\"two-sum\")\n\nmodule.exports = scaleLinearExpansion\n\nfunction scaleLinearExpansion(e, scale) {\n  var n = e.length\n  if(n === 1) {\n    var ts = twoProduct(e[0], scale)\n    if(ts[0]) {\n      return ts\n    }\n    return [ ts[1] ]\n  }\n  var g = new Array(2 * n)\n  var q = [0.1, 0.1]\n  var t = [0.1, 0.1]\n  var count = 0\n  twoProduct(e[0], scale, q)\n  if(q[0]) {\n    g[count++] = q[0]\n  }\n  for(var i=1; i<n; ++i) {\n    twoProduct(e[i], scale, t)\n    var pq = q[1]\n    twoSum(pq, t[0], q)\n    if(q[0]) {\n      g[count++] = q[0]\n    }\n    var a = t[1]\n    var b = q[1]\n    var x = a + b\n    var bv = x - a\n    var y = b - bv\n    q[1] = x\n    if(y) {\n      g[count++] = y\n    }\n  }\n  if(q[1]) {\n    g[count++] = q[1]\n  }\n  if(count === 0) {\n    g[count++] = 0.0\n  }\n  g.length = count\n  return g\n}", "\"use strict\"\n\nmodule.exports = robustSubtract\n\n//Easy case: Add two scalars\nfunction scalarScalar(a, b) {\n  var x = a + b\n  var bv = x - a\n  var av = x - bv\n  var br = b - bv\n  var ar = a - av\n  var y = ar + br\n  if(y) {\n    return [y, x]\n  }\n  return [x]\n}\n\nfunction robustSubtract(e, f) {\n  var ne = e.length|0\n  var nf = f.length|0\n  if(ne === 1 && nf === 1) {\n    return scalarScalar(e[0], -f[0])\n  }\n  var n = ne + nf\n  var g = new Array(n)\n  var count = 0\n  var eptr = 0\n  var fptr = 0\n  var abs = Math.abs\n  var ei = e[eptr]\n  var ea = abs(ei)\n  var fi = -f[fptr]\n  var fa = abs(fi)\n  var a, b\n  if(ea < fa) {\n    b = ei\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n      ea = abs(ei)\n    }\n  } else {\n    b = fi\n    fptr += 1\n    if(fptr < nf) {\n      fi = -f[fptr]\n      fa = abs(fi)\n    }\n  }\n  if((eptr < ne && ea < fa) || (fptr >= nf)) {\n    a = ei\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n      ea = abs(ei)\n    }\n  } else {\n    a = fi\n    fptr += 1\n    if(fptr < nf) {\n      fi = -f[fptr]\n      fa = abs(fi)\n    }\n  }\n  var x = a + b\n  var bv = x - a\n  var y = b - bv\n  var q0 = y\n  var q1 = x\n  var _x, _bv, _av, _br, _ar\n  while(eptr < ne && fptr < nf) {\n    if(ea < fa) {\n      a = ei\n      eptr += 1\n      if(eptr < ne) {\n        ei = e[eptr]\n        ea = abs(ei)\n      }\n    } else {\n      a = fi\n      fptr += 1\n      if(fptr < nf) {\n        fi = -f[fptr]\n        fa = abs(fi)\n      }\n    }\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    }\n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n  }\n  while(eptr < ne) {\n    a = ei\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    }\n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n    }\n  }\n  while(fptr < nf) {\n    a = fi\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    } \n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n    fptr += 1\n    if(fptr < nf) {\n      fi = -f[fptr]\n    }\n  }\n  if(q0) {\n    g[count++] = q0\n  }\n  if(q1) {\n    g[count++] = q1\n  }\n  if(!count) {\n    g[count++] = 0.0  \n  }\n  g.length = count\n  return g\n}", "\"use strict\"\n\nvar twoProduct = require(\"two-product\")\nvar robustSum = require(\"robust-sum\")\nvar robustScale = require(\"robust-scale\")\nvar robustSubtract = require(\"robust-subtract\")\n\nvar NUM_EXPAND = 5\n\nvar EPSILON     = 1.1102230246251565e-16\nvar ERRBOUND3   = (3.0 + 16.0 * EPSILON) * EPSILON\nvar ERRBOUND4   = (7.0 + 56.0 * EPSILON) * EPSILON\n\nfunction orientation_3(sum, prod, scale, sub) {\n  return function orientation3Exact(m0, m1, m2) {\n    var p = sum(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])))\n    var n = sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0]))\n    var d = sub(p, n)\n    return d[d.length - 1]\n  }\n}\n\nfunction orientation_4(sum, prod, scale, sub) {\n  return function orientation4Exact(m0, m1, m2, m3) {\n    var p = sum(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m1[2]), sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), -m2[2]), scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m3[2]))), sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m3[2]))))\n    var n = sum(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m2[2]), scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), m3[2]))), sum(scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m2[2]))))\n    var d = sub(p, n)\n    return d[d.length - 1]\n  }\n}\n\nfunction orientation_5(sum, prod, scale, sub) {\n  return function orientation5Exact(m0, m1, m2, m3, m4) {\n    var p = sum(sum(sum(scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m2[2]), sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), -m3[2]), scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m4[2]))), m1[3]), sum(scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m1[2]), sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), -m3[2]), scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), m4[2]))), -m2[3]), scale(sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), m1[2]), sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), -m2[2]), scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m4[2]))), m3[3]))), sum(scale(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m1[2]), sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), -m2[2]), scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m3[2]))), -m4[3]), sum(scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m1[2]), sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), -m3[2]), scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), m4[2]))), m0[3]), scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m3[2]), scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), m4[2]))), -m1[3])))), sum(sum(scale(sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m4[2]))), m3[3]), sum(scale(sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m3[2]))), -m4[3]), scale(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m1[2]), sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), -m2[2]), scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m3[2]))), m0[3]))), sum(scale(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m2[2]), scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), m3[2]))), -m1[3]), sum(scale(sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m3[2]))), m2[3]), scale(sum(scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m2[2]))), -m3[3])))))\n    var n = sum(sum(sum(scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m2[2]), sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), -m3[2]), scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m4[2]))), m0[3]), scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m3[2]), scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), m4[2]))), -m2[3])), sum(scale(sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m2[2]), scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), m4[2]))), m3[3]), scale(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m2[2]), scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), m3[2]))), -m4[3]))), sum(sum(scale(sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), m1[2]), sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), -m2[2]), scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m4[2]))), m0[3]), scale(sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m2[2]), scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), m4[2]))), -m1[3])), sum(scale(sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m4[2]))), m2[3]), scale(sum(scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m2[2]))), -m4[3]))))\n    var d = sub(p, n)\n    return d[d.length - 1]\n  }\n}\n\nfunction orientation(n) {\n  var fn =\n    n === 3 ? orientation_3 :\n    n === 4 ? orientation_4 : orientation_5\n\n  return fn(robustSum, twoProduct, robustScale, robustSubtract)\n}\n\nvar orientation3Exact = orientation(3)\nvar orientation4Exact = orientation(4)\n\nvar CACHED = [\n  function orientation0() { return 0 },\n  function orientation1() { return 0 },\n  function orientation2(a, b) {\n    return b[0] - a[0]\n  },\n  function orientation3(a, b, c) {\n    var l = (a[1] - c[1]) * (b[0] - c[0])\n    var r = (a[0] - c[0]) * (b[1] - c[1])\n    var det = l - r\n    var s\n    if(l > 0) {\n      if(r <= 0) {\n        return det\n      } else {\n        s = l + r\n      }\n    } else if(l < 0) {\n      if(r >= 0) {\n        return det\n      } else {\n        s = -(l + r)\n      }\n    } else {\n      return det\n    }\n    var tol = ERRBOUND3 * s\n    if(det >= tol || det <= -tol) {\n      return det\n    }\n    return orientation3Exact(a, b, c)\n  },\n  function orientation4(a,b,c,d) {\n    var adx = a[0] - d[0]\n    var bdx = b[0] - d[0]\n    var cdx = c[0] - d[0]\n    var ady = a[1] - d[1]\n    var bdy = b[1] - d[1]\n    var cdy = c[1] - d[1]\n    var adz = a[2] - d[2]\n    var bdz = b[2] - d[2]\n    var cdz = c[2] - d[2]\n    var bdxcdy = bdx * cdy\n    var cdxbdy = cdx * bdy\n    var cdxady = cdx * ady\n    var adxcdy = adx * cdy\n    var adxbdy = adx * bdy\n    var bdxady = bdx * ady\n    var det = adz * (bdxcdy - cdxbdy)\n            + bdz * (cdxady - adxcdy)\n            + cdz * (adxbdy - bdxady)\n    var permanent = (Math.abs(bdxcdy) + Math.abs(cdxbdy)) * Math.abs(adz)\n                  + (Math.abs(cdxady) + Math.abs(adxcdy)) * Math.abs(bdz)\n                  + (Math.abs(adxbdy) + Math.abs(bdxady)) * Math.abs(cdz)\n    var tol = ERRBOUND4 * permanent\n    if ((det > tol) || (-det > tol)) {\n      return det\n    }\n    return orientation4Exact(a,b,c,d)\n  }\n]\n\nfunction slowOrient(args) {\n  var proc = CACHED[args.length]\n  if(!proc) {\n    proc = CACHED[args.length] = orientation(args.length)\n  }\n  return proc.apply(undefined, args)\n}\n\nfunction proc (slow, o0, o1, o2, o3, o4, o5) {\n  return function getOrientation(a0, a1, a2, a3, a4) {\n    switch (arguments.length) {\n      case 0:\n      case 1:\n        return 0;\n      case 2:\n        return o2(a0, a1)\n      case 3:\n        return o3(a0, a1, a2)\n      case 4:\n        return o4(a0, a1, a2, a3)\n      case 5:\n        return o5(a0, a1, a2, a3, a4)\n    }\n\n    var s = new Array(arguments.length)\n    for (var i = 0; i < arguments.length; ++i) {\n      s[i] = arguments[i]\n    }\n    return slow(s)\n  }\n}\n\nfunction generateOrientationProc() {\n  while(CACHED.length <= NUM_EXPAND) {\n    CACHED.push(orientation(CACHED.length))\n  }\n  module.exports = proc.apply(undefined, [slowOrient].concat(CACHED))\n  for(var i=0; i<=NUM_EXPAND; ++i) {\n    module.exports[i] = CACHED[i]\n  }\n}\n\ngenerateOrientationProc()", "'use strict'\n\nmodule.exports = monotoneConvexHull2D\n\nvar orient = require('robust-orientation')[3]\n\nfunction monotoneConvexHull2D(points) {\n  var n = points.length\n\n  if(n < 3) {\n    var result = new Array(n)\n    for(var i=0; i<n; ++i) {\n      result[i] = i\n    }\n\n    if(n === 2 &&\n       points[0][0] === points[1][0] &&\n       points[0][1] === points[1][1]) {\n      return [0]\n    }\n\n    return result\n  }\n\n  //Sort point indices along x-axis\n  var sorted = new Array(n)\n  for(var i=0; i<n; ++i) {\n    sorted[i] = i\n  }\n  sorted.sort(function(a,b) {\n    var d = points[a][0]-points[b][0]\n    if(d) {\n      return d\n    }\n    return points[a][1] - points[b][1]\n  })\n\n  //Construct upper and lower hulls\n  var lower = [sorted[0], sorted[1]]\n  var upper = [sorted[0], sorted[1]]\n\n  for(var i=2; i<n; ++i) {\n    var idx = sorted[i]\n    var p   = points[idx]\n\n    //Insert into lower list\n    var m = lower.length\n    while(m > 1 && orient(\n        points[lower[m-2]], \n        points[lower[m-1]], \n        p) <= 0) {\n      m -= 1\n      lower.pop()\n    }\n    lower.push(idx)\n\n    //Insert into upper list\n    m = upper.length\n    while(m > 1 && orient(\n        points[upper[m-2]], \n        points[upper[m-1]], \n        p) >= 0) {\n      m -= 1\n      upper.pop()\n    }\n    upper.push(idx)\n  }\n\n  //Merge lists together\n  var result = new Array(upper.length + lower.length - 2)\n  var ptr    = 0\n  for(var i=0, nl=lower.length; i<nl; ++i) {\n    result[ptr++] = lower[i]\n  }\n  for(var j=upper.length-2; j>0; --j) {\n    result[ptr++] = upper[j]\n  }\n\n  //Return result\n  return result\n}", "'use strict'\n\nmodule.exports = convexHull2D\n\nvar monotoneHull = require('monotone-convex-hull-2d')\n\nfunction convexHull2D(points) {\n  var hull = monotoneHull(points)\n  var h = hull.length\n  if(h <= 2) {\n    return []\n  }\n  var edges = new Array(h)\n  var a = hull[h-1]\n  for(var i=0; i<h; ++i) {\n    var b = hull[i]\n    edges[i] = [a,b]\n    a = b\n  }\n  return edges\n}\n", "/**\n * Bit twiddling hacks for JavaScript.\n *\n * Author: Mikola Lysenko\n *\n * Ported from Stanford bit twiddling hack library:\n *    http://graphics.stanford.edu/~seander/bithacks.html\n */\n\n\"use strict\"; \"use restrict\";\n\n//Number of bits in an integer\nvar INT_BITS = 32;\n\n//Constants\nexports.INT_BITS  = INT_BITS;\nexports.INT_MAX   =  0x7fffffff;\nexports.INT_MIN   = -1<<(INT_BITS-1);\n\n//Returns -1, 0, +1 depending on sign of x\nexports.sign = function(v) {\n  return (v > 0) - (v < 0);\n}\n\n//Computes absolute value of integer\nexports.abs = function(v) {\n  var mask = v >> (INT_BITS-1);\n  return (v ^ mask) - mask;\n}\n\n//Computes minimum of integers x and y\nexports.min = function(x, y) {\n  return y ^ ((x ^ y) & -(x < y));\n}\n\n//Computes maximum of integers x and y\nexports.max = function(x, y) {\n  return x ^ ((x ^ y) & -(x < y));\n}\n\n//Checks if a number is a power of two\nexports.isPow2 = function(v) {\n  return !(v & (v-1)) && (!!v);\n}\n\n//Computes log base 2 of v\nexports.log2 = function(v) {\n  var r, shift;\n  r =     (v > 0xFFFF) << 4; v >>>= r;\n  shift = (v > 0xFF  ) << 3; v >>>= shift; r |= shift;\n  shift = (v > 0xF   ) << 2; v >>>= shift; r |= shift;\n  shift = (v > 0x3   ) << 1; v >>>= shift; r |= shift;\n  return r | (v >> 1);\n}\n\n//Computes log base 10 of v\nexports.log10 = function(v) {\n  return  (v >= 1000000000) ? 9 : (v >= 100000000) ? 8 : (v >= 10000000) ? 7 :\n          (v >= 1000000) ? 6 : (v >= 100000) ? 5 : (v >= 10000) ? 4 :\n          (v >= 1000) ? 3 : (v >= 100) ? 2 : (v >= 10) ? 1 : 0;\n}\n\n//Counts number of bits\nexports.popCount = function(v) {\n  v = v - ((v >>> 1) & 0x55555555);\n  v = (v & 0x33333333) + ((v >>> 2) & 0x33333333);\n  return ((v + (v >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24;\n}\n\n//Counts number of trailing zeros\nfunction countTrailingZeros(v) {\n  var c = 32;\n  v &= -v;\n  if (v) c--;\n  if (v & 0x0000FFFF) c -= 16;\n  if (v & 0x00FF00FF) c -= 8;\n  if (v & 0x0F0F0F0F) c -= 4;\n  if (v & 0x33333333) c -= 2;\n  if (v & 0x55555555) c -= 1;\n  return c;\n}\nexports.countTrailingZeros = countTrailingZeros;\n\n//Rounds to next power of 2\nexports.nextPow2 = function(v) {\n  v += v === 0;\n  --v;\n  v |= v >>> 1;\n  v |= v >>> 2;\n  v |= v >>> 4;\n  v |= v >>> 8;\n  v |= v >>> 16;\n  return v + 1;\n}\n\n//Rounds down to previous power of 2\nexports.prevPow2 = function(v) {\n  v |= v >>> 1;\n  v |= v >>> 2;\n  v |= v >>> 4;\n  v |= v >>> 8;\n  v |= v >>> 16;\n  return v - (v>>>1);\n}\n\n//Computes parity of word\nexports.parity = function(v) {\n  v ^= v >>> 16;\n  v ^= v >>> 8;\n  v ^= v >>> 4;\n  v &= 0xf;\n  return (0x6996 >>> v) & 1;\n}\n\nvar REVERSE_TABLE = new Array(256);\n\n(function(tab) {\n  for(var i=0; i<256; ++i) {\n    var v = i, r = i, s = 7;\n    for (v >>>= 1; v; v >>>= 1) {\n      r <<= 1;\n      r |= v & 1;\n      --s;\n    }\n    tab[i] = (r << s) & 0xff;\n  }\n})(REVERSE_TABLE);\n\n//Reverse bits in a 32 bit word\nexports.reverse = function(v) {\n  return  (REVERSE_TABLE[ v         & 0xff] << 24) |\n          (REVERSE_TABLE[(v >>> 8)  & 0xff] << 16) |\n          (REVERSE_TABLE[(v >>> 16) & 0xff] << 8)  |\n           REVERSE_TABLE[(v >>> 24) & 0xff];\n}\n\n//Interleave bits of 2 coordinates with 16 bits.  Useful for fast quadtree codes\nexports.interleave2 = function(x, y) {\n  x &= 0xFFFF;\n  x = (x | (x << 8)) & 0x00FF00FF;\n  x = (x | (x << 4)) & 0x0F0F0F0F;\n  x = (x | (x << 2)) & 0x33333333;\n  x = (x | (x << 1)) & 0x55555555;\n\n  y &= 0xFFFF;\n  y = (y | (y << 8)) & 0x00FF00FF;\n  y = (y | (y << 4)) & 0x0F0F0F0F;\n  y = (y | (y << 2)) & 0x33333333;\n  y = (y | (y << 1)) & 0x55555555;\n\n  return x | (y << 1);\n}\n\n//Extracts the nth interleaved component\nexports.deinterleave2 = function(v, n) {\n  v = (v >>> n) & 0x55555555;\n  v = (v | (v >>> 1))  & 0x33333333;\n  v = (v | (v >>> 2))  & 0x0F0F0F0F;\n  v = (v | (v >>> 4))  & 0x00FF00FF;\n  v = (v | (v >>> 16)) & 0x000FFFF;\n  return (v << 16) >> 16;\n}\n\n\n//Interleave bits of 3 coordinates, each with 10 bits.  Useful for fast octree codes\nexports.interleave3 = function(x, y, z) {\n  x &= 0x3FF;\n  x  = (x | (x<<16)) & 4278190335;\n  x  = (x | (x<<8))  & 251719695;\n  x  = (x | (x<<4))  & 3272356035;\n  x  = (x | (x<<2))  & 1227133513;\n\n  y &= 0x3FF;\n  y  = (y | (y<<16)) & 4278190335;\n  y  = (y | (y<<8))  & 251719695;\n  y  = (y | (y<<4))  & 3272356035;\n  y  = (y | (y<<2))  & 1227133513;\n  x |= (y << 1);\n  \n  z &= 0x3FF;\n  z  = (z | (z<<16)) & 4278190335;\n  z  = (z | (z<<8))  & 251719695;\n  z  = (z | (z<<4))  & 3272356035;\n  z  = (z | (z<<2))  & 1227133513;\n  \n  return x | (z << 2);\n}\n\n//Extracts nth interleaved component of a 3-tuple\nexports.deinterleave3 = function(v, n) {\n  v = (v >>> n)       & 1227133513;\n  v = (v | (v>>>2))   & 3272356035;\n  v = (v | (v>>>4))   & 251719695;\n  v = (v | (v>>>8))   & 4278190335;\n  v = (v | (v>>>16))  & 0x3FF;\n  return (v<<22)>>22;\n}\n\n//Computes next combination in colexicographic order (this is mistakenly called nextPermutation on the bit twiddling hacks page)\nexports.nextCombination = function(v) {\n  var t = v | (v - 1);\n  return (t + 1) | (((~t & -~t) - 1) >>> (countTrailingZeros(v) + 1));\n}\n\n", "\"use strict\"; \"use restrict\";\n\nmodule.exports = UnionFind;\n\nfunction UnionFind(count) {\n  this.roots = new Array(count);\n  this.ranks = new Array(count);\n  \n  for(var i=0; i<count; ++i) {\n    this.roots[i] = i;\n    this.ranks[i] = 0;\n  }\n}\n\nvar proto = UnionFind.prototype\n\nObject.defineProperty(proto, \"length\", {\n  \"get\": function() {\n    return this.roots.length\n  }\n})\n\nproto.makeSet = function() {\n  var n = this.roots.length;\n  this.roots.push(n);\n  this.ranks.push(0);\n  return n;\n}\n\nproto.find = function(x) {\n  var x0 = x\n  var roots = this.roots;\n  while(roots[x] !== x) {\n    x = roots[x]\n  }\n  while(roots[x0] !== x) {\n    var y = roots[x0]\n    roots[x0] = x\n    x0 = y\n  }\n  return x;\n}\n\nproto.link = function(x, y) {\n  var xr = this.find(x)\n    , yr = this.find(y);\n  if(xr === yr) {\n    return;\n  }\n  var ranks = this.ranks\n    , roots = this.roots\n    , xd    = ranks[xr]\n    , yd    = ranks[yr];\n  if(xd < yd) {\n    roots[xr] = yr;\n  } else if(yd < xd) {\n    roots[yr] = xr;\n  } else {\n    roots[yr] = xr;\n    ++ranks[xr];\n  }\n}", "\"use strict\"; \"use restrict\";\n\nvar bits      = require(\"bit-twiddle\")\n  , UnionFind = require(\"union-find\")\n\n//Returns the dimension of a cell complex\nfunction dimension(cells) {\n  var d = 0\n    , max = Math.max\n  for(var i=0, il=cells.length; i<il; ++i) {\n    d = max(d, cells[i].length)\n  }\n  return d-1\n}\nexports.dimension = dimension\n\n//Counts the number of vertices in faces\nfunction countVertices(cells) {\n  var vc = -1\n    , max = Math.max\n  for(var i=0, il=cells.length; i<il; ++i) {\n    var c = cells[i]\n    for(var j=0, jl=c.length; j<jl; ++j) {\n      vc = max(vc, c[j])\n    }\n  }\n  return vc+1\n}\nexports.countVertices = countVertices\n\n//Returns a deep copy of cells\nfunction cloneCells(cells) {\n  var ncells = new Array(cells.length)\n  for(var i=0, il=cells.length; i<il; ++i) {\n    ncells[i] = cells[i].slice(0)\n  }\n  return ncells\n}\nexports.cloneCells = cloneCells\n\n//Ranks a pair of cells up to permutation\nfunction compareCells(a, b) {\n  var n = a.length\n    , t = a.length - b.length\n    , min = Math.min\n  if(t) {\n    return t\n  }\n  switch(n) {\n    case 0:\n      return 0;\n    case 1:\n      return a[0] - b[0];\n    case 2:\n      var d = a[0]+a[1]-b[0]-b[1]\n      if(d) {\n        return d\n      }\n      return min(a[0],a[1]) - min(b[0],b[1])\n    case 3:\n      var l1 = a[0]+a[1]\n        , m1 = b[0]+b[1]\n      d = l1+a[2] - (m1+b[2])\n      if(d) {\n        return d\n      }\n      var l0 = min(a[0], a[1])\n        , m0 = min(b[0], b[1])\n        , d  = min(l0, a[2]) - min(m0, b[2])\n      if(d) {\n        return d\n      }\n      return min(l0+a[2], l1) - min(m0+b[2], m1)\n    \n    //TODO: Maybe optimize n=4 as well?\n    \n    default:\n      var as = a.slice(0)\n      as.sort()\n      var bs = b.slice(0)\n      bs.sort()\n      for(var i=0; i<n; ++i) {\n        t = as[i] - bs[i]\n        if(t) {\n          return t\n        }\n      }\n      return 0\n  }\n}\nexports.compareCells = compareCells\n\nfunction compareZipped(a, b) {\n  return compareCells(a[0], b[0])\n}\n\n//Puts a cell complex into normal order for the purposes of findCell queries\nfunction normalize(cells, attr) {\n  if(attr) {\n    var len = cells.length\n    var zipped = new Array(len)\n    for(var i=0; i<len; ++i) {\n      zipped[i] = [cells[i], attr[i]]\n    }\n    zipped.sort(compareZipped)\n    for(var i=0; i<len; ++i) {\n      cells[i] = zipped[i][0]\n      attr[i] = zipped[i][1]\n    }\n    return cells\n  } else {\n    cells.sort(compareCells)\n    return cells\n  }\n}\nexports.normalize = normalize\n\n//Removes all duplicate cells in the complex\nfunction unique(cells) {\n  if(cells.length === 0) {\n    return []\n  }\n  var ptr = 1\n    , len = cells.length\n  for(var i=1; i<len; ++i) {\n    var a = cells[i]\n    if(compareCells(a, cells[i-1])) {\n      if(i === ptr) {\n        ptr++\n        continue\n      }\n      cells[ptr++] = a\n    }\n  }\n  cells.length = ptr\n  return cells\n}\nexports.unique = unique;\n\n//Finds a cell in a normalized cell complex\nfunction findCell(cells, c) {\n  var lo = 0\n    , hi = cells.length-1\n    , r  = -1\n  while (lo <= hi) {\n    var mid = (lo + hi) >> 1\n      , s   = compareCells(cells[mid], c)\n    if(s <= 0) {\n      if(s === 0) {\n        r = mid\n      }\n      lo = mid + 1\n    } else if(s > 0) {\n      hi = mid - 1\n    }\n  }\n  return r\n}\nexports.findCell = findCell;\n\n//Builds an index for an n-cell.  This is more general than dual, but less efficient\nfunction incidence(from_cells, to_cells) {\n  var index = new Array(from_cells.length)\n  for(var i=0, il=index.length; i<il; ++i) {\n    index[i] = []\n  }\n  var b = []\n  for(var i=0, n=to_cells.length; i<n; ++i) {\n    var c = to_cells[i]\n    var cl = c.length\n    for(var k=1, kn=(1<<cl); k<kn; ++k) {\n      b.length = bits.popCount(k)\n      var l = 0\n      for(var j=0; j<cl; ++j) {\n        if(k & (1<<j)) {\n          b[l++] = c[j]\n        }\n      }\n      var idx=findCell(from_cells, b)\n      if(idx < 0) {\n        continue\n      }\n      while(true) {\n        index[idx++].push(i)\n        if(idx >= from_cells.length || compareCells(from_cells[idx], b) !== 0) {\n          break\n        }\n      }\n    }\n  }\n  return index\n}\nexports.incidence = incidence\n\n//Computes the dual of the mesh.  This is basically an optimized version of buildIndex for the situation where from_cells is just the list of vertices\nfunction dual(cells, vertex_count) {\n  if(!vertex_count) {\n    return incidence(unique(skeleton(cells, 0)), cells, 0)\n  }\n  var res = new Array(vertex_count)\n  for(var i=0; i<vertex_count; ++i) {\n    res[i] = []\n  }\n  for(var i=0, len=cells.length; i<len; ++i) {\n    var c = cells[i]\n    for(var j=0, cl=c.length; j<cl; ++j) {\n      res[c[j]].push(i)\n    }\n  }\n  return res\n}\nexports.dual = dual\n\n//Enumerates all cells in the complex\nfunction explode(cells) {\n  var result = []\n  for(var i=0, il=cells.length; i<il; ++i) {\n    var c = cells[i]\n      , cl = c.length|0\n    for(var j=1, jl=(1<<cl); j<jl; ++j) {\n      var b = []\n      for(var k=0; k<cl; ++k) {\n        if((j >>> k) & 1) {\n          b.push(c[k])\n        }\n      }\n      result.push(b)\n    }\n  }\n  return normalize(result)\n}\nexports.explode = explode\n\n//Enumerates all of the n-cells of a cell complex\nfunction skeleton(cells, n) {\n  if(n < 0) {\n    return []\n  }\n  var result = []\n    , k0     = (1<<(n+1))-1\n  for(var i=0; i<cells.length; ++i) {\n    var c = cells[i]\n    for(var k=k0; k<(1<<c.length); k=bits.nextCombination(k)) {\n      var b = new Array(n+1)\n        , l = 0\n      for(var j=0; j<c.length; ++j) {\n        if(k & (1<<j)) {\n          b[l++] = c[j]\n        }\n      }\n      result.push(b)\n    }\n  }\n  return normalize(result)\n}\nexports.skeleton = skeleton;\n\n//Computes the boundary of all cells, does not remove duplicates\nfunction boundary(cells) {\n  var res = []\n  for(var i=0,il=cells.length; i<il; ++i) {\n    var c = cells[i]\n    for(var j=0,cl=c.length; j<cl; ++j) {\n      var b = new Array(c.length-1)\n      for(var k=0, l=0; k<cl; ++k) {\n        if(k !== j) {\n          b[l++] = c[k]\n        }\n      }\n      res.push(b)\n    }\n  }\n  return normalize(res)\n}\nexports.boundary = boundary;\n\n//Computes connected components for a dense cell complex\nfunction connectedComponents_dense(cells, vertex_count) {\n  var labels = new UnionFind(vertex_count)\n  for(var i=0; i<cells.length; ++i) {\n    var c = cells[i]\n    for(var j=0; j<c.length; ++j) {\n      for(var k=j+1; k<c.length; ++k) {\n        labels.link(c[j], c[k])\n      }\n    }\n  }\n  var components = []\n    , component_labels = labels.ranks\n  for(var i=0; i<component_labels.length; ++i) {\n    component_labels[i] = -1\n  }\n  for(var i=0; i<cells.length; ++i) {\n    var l = labels.find(cells[i][0])\n    if(component_labels[l] < 0) {\n      component_labels[l] = components.length\n      components.push([cells[i].slice(0)])\n    } else {\n      components[component_labels[l]].push(cells[i].slice(0))\n    }\n  }\n  return components\n}\n\n//Computes connected components for a sparse graph\nfunction connectedComponents_sparse(cells) {\n  var vertices  = unique(normalize(skeleton(cells, 0)))\n    , labels    = new UnionFind(vertices.length)\n  for(var i=0; i<cells.length; ++i) {\n    var c = cells[i]\n    for(var j=0; j<c.length; ++j) {\n      var vj = findCell(vertices, [c[j]])\n      for(var k=j+1; k<c.length; ++k) {\n        labels.link(vj, findCell(vertices, [c[k]]))\n      }\n    }\n  }\n  var components        = []\n    , component_labels  = labels.ranks\n  for(var i=0; i<component_labels.length; ++i) {\n    component_labels[i] = -1\n  }\n  for(var i=0; i<cells.length; ++i) {\n    var l = labels.find(findCell(vertices, [cells[i][0]]));\n    if(component_labels[l] < 0) {\n      component_labels[l] = components.length\n      components.push([cells[i].slice(0)])\n    } else {\n      components[component_labels[l]].push(cells[i].slice(0))\n    }\n  }\n  return components\n}\n\n//Computes connected components for a cell complex\nfunction connectedComponents(cells, vertex_count) {\n  if(vertex_count) {\n    return connectedComponents_dense(cells, vertex_count)\n  }\n  return connectedComponents_sparse(cells)\n}\nexports.connectedComponents = connectedComponents\n", "\"use strict\"\n\n//High level idea:\n// 1. Use Clarkson's incremental construction to find convex hull\n// 2. Point location in triangulation by jump and walk\n\nmodule.exports = incrementalConvexHull\n\nvar orient = require(\"robust-orientation\")\nvar compareCell = require(\"simplicial-complex\").compareCells\n\nfunction compareInt(a, b) {\n  return a - b\n}\n\nfunction Simplex(vertices, adjacent, boundary) {\n  this.vertices = vertices\n  this.adjacent = adjacent\n  this.boundary = boundary\n  this.lastVisited = -1\n}\n\nSimplex.prototype.flip = function() {\n  var t = this.vertices[0]\n  this.vertices[0] = this.vertices[1]\n  this.vertices[1] = t\n  var u = this.adjacent[0]\n  this.adjacent[0] = this.adjacent[1]\n  this.adjacent[1] = u\n}\n\nfunction GlueFacet(vertices, cell, index) {\n  this.vertices = vertices\n  this.cell = cell\n  this.index = index\n}\n\nfunction compareGlue(a, b) {\n  return compareCell(a.vertices, b.vertices)\n}\n\nfunction bakeOrient(d) {\n  var code = [\"function orient(){var tuple=this.tuple;return test(\"]\n  for(var i=0; i<=d; ++i) {\n    if(i > 0) {\n      code.push(\",\")\n    }\n    code.push(\"tuple[\", i, \"]\")\n  }\n  code.push(\")}return orient\")\n  var proc = new Function(\"test\", code.join(\"\"))\n  var test = orient[d+1]\n  if(!test) {\n    test = orient\n  }\n  return proc(test)\n}\n\nvar BAKED = []\n\nfunction Triangulation(dimension, vertices, simplices) {\n  this.dimension = dimension\n  this.vertices = vertices\n  this.simplices = simplices\n  this.interior = simplices.filter(function(c) {\n    return !c.boundary\n  })\n\n  this.tuple = new Array(dimension+1)\n  for(var i=0; i<=dimension; ++i) {\n    this.tuple[i] = this.vertices[i]\n  }\n\n  var o = BAKED[dimension]\n  if(!o) {\n    o = BAKED[dimension] = bakeOrient(dimension)\n  }\n  this.orient = o\n}\n\nvar proto = Triangulation.prototype\n\n//Degenerate situation where we are on boundary, but coplanar to face\nproto.handleBoundaryDegeneracy = function(cell, point) {\n  var d = this.dimension\n  var n = this.vertices.length - 1\n  var tuple = this.tuple\n  var verts = this.vertices\n\n  //Dumb solution: Just do dfs from boundary cell until we find any peak, or terminate\n  var toVisit = [ cell ]\n  cell.lastVisited = -n\n  while(toVisit.length > 0) {\n    cell = toVisit.pop()\n    var cellVerts = cell.vertices\n    var cellAdj = cell.adjacent\n    for(var i=0; i<=d; ++i) {\n      var neighbor = cellAdj[i]\n      if(!neighbor.boundary || neighbor.lastVisited <= -n) {\n        continue\n      }\n      var nv = neighbor.vertices\n      for(var j=0; j<=d; ++j) {\n        var vv = nv[j]\n        if(vv < 0) {\n          tuple[j] = point\n        } else {\n          tuple[j] = verts[vv]\n        }\n      }\n      var o = this.orient()\n      if(o > 0) {\n        return neighbor\n      }\n      neighbor.lastVisited = -n\n      if(o === 0) {\n        toVisit.push(neighbor)\n      }\n    }\n  }\n  return null\n}\n\nproto.walk = function(point, random) {\n  //Alias local properties\n  var n = this.vertices.length - 1\n  var d = this.dimension\n  var verts = this.vertices\n  var tuple = this.tuple\n\n  //Compute initial jump cell\n  var initIndex = random ? (this.interior.length * Math.random())|0 : (this.interior.length-1)\n  var cell = this.interior[ initIndex ]\n\n  //Start walking\nouterLoop:\n  while(!cell.boundary) {\n    var cellVerts = cell.vertices\n    var cellAdj = cell.adjacent\n\n    for(var i=0; i<=d; ++i) {\n      tuple[i] = verts[cellVerts[i]]\n    }\n    cell.lastVisited = n\n\n    //Find farthest adjacent cell\n    for(var i=0; i<=d; ++i) {\n      var neighbor = cellAdj[i]\n      if(neighbor.lastVisited >= n) {\n        continue\n      }\n      var prev = tuple[i]\n      tuple[i] = point\n      var o = this.orient()\n      tuple[i] = prev\n      if(o < 0) {\n        cell = neighbor\n        continue outerLoop\n      } else {\n        if(!neighbor.boundary) {\n          neighbor.lastVisited = n\n        } else {\n          neighbor.lastVisited = -n\n        }\n      }\n    }\n    return\n  }\n\n  return cell\n}\n\nproto.addPeaks = function(point, cell) {\n  var n = this.vertices.length - 1\n  var d = this.dimension\n  var verts = this.vertices\n  var tuple = this.tuple\n  var interior = this.interior\n  var simplices = this.simplices\n\n  //Walking finished at boundary, time to add peaks\n  var tovisit = [ cell ]\n\n  //Stretch initial boundary cell into a peak\n  cell.lastVisited = n\n  cell.vertices[cell.vertices.indexOf(-1)] = n\n  cell.boundary = false\n  interior.push(cell)\n\n  //Record a list of all new boundaries created by added peaks so we can glue them together when we are all done\n  var glueFacets = []\n\n  //Do a traversal of the boundary walking outward from starting peak\n  while(tovisit.length > 0) {\n    //Pop off peak and walk over adjacent cells\n    var cell = tovisit.pop()\n    var cellVerts = cell.vertices\n    var cellAdj = cell.adjacent\n    var indexOfN = cellVerts.indexOf(n)\n    if(indexOfN < 0) {\n      continue\n    }\n\n    for(var i=0; i<=d; ++i) {\n      if(i === indexOfN) {\n        continue\n      }\n\n      //For each boundary neighbor of the cell\n      var neighbor = cellAdj[i]\n      if(!neighbor.boundary || neighbor.lastVisited >= n) {\n        continue\n      }\n\n      var nv = neighbor.vertices\n\n      //Test if neighbor is a peak\n      if(neighbor.lastVisited !== -n) {      \n        //Compute orientation of p relative to each boundary peak\n        var indexOfNeg1 = 0\n        for(var j=0; j<=d; ++j) {\n          if(nv[j] < 0) {\n            indexOfNeg1 = j\n            tuple[j] = point\n          } else {\n            tuple[j] = verts[nv[j]]\n          }\n        }\n        var o = this.orient()\n\n        //Test if neighbor cell is also a peak\n        if(o > 0) {\n          nv[indexOfNeg1] = n\n          neighbor.boundary = false\n          interior.push(neighbor)\n          tovisit.push(neighbor)\n          neighbor.lastVisited = n\n          continue\n        } else {\n          neighbor.lastVisited = -n\n        }\n      }\n\n      var na = neighbor.adjacent\n\n      //Otherwise, replace neighbor with new face\n      var vverts = cellVerts.slice()\n      var vadj = cellAdj.slice()\n      var ncell = new Simplex(vverts, vadj, true)\n      simplices.push(ncell)\n\n      //Connect to neighbor\n      var opposite = na.indexOf(cell)\n      if(opposite < 0) {\n        continue\n      }\n      na[opposite] = ncell\n      vadj[indexOfN] = neighbor\n\n      //Connect to cell\n      vverts[i] = -1\n      vadj[i] = cell\n      cellAdj[i] = ncell\n\n      //Flip facet\n      ncell.flip()\n\n      //Add to glue list\n      for(var j=0; j<=d; ++j) {\n        var uu = vverts[j]\n        if(uu < 0 || uu === n) {\n          continue\n        }\n        var nface = new Array(d-1)\n        var nptr = 0\n        for(var k=0; k<=d; ++k) {\n          var vv = vverts[k]\n          if(vv < 0 || k === j) {\n            continue\n          }\n          nface[nptr++] = vv\n        }\n        glueFacets.push(new GlueFacet(nface, ncell, j))\n      }\n    }\n  }\n\n  //Glue boundary facets together\n  glueFacets.sort(compareGlue)\n\n  for(var i=0; i+1<glueFacets.length; i+=2) {\n    var a = glueFacets[i]\n    var b = glueFacets[i+1]\n    var ai = a.index\n    var bi = b.index\n    if(ai < 0 || bi < 0) {\n      continue\n    }\n    a.cell.adjacent[a.index] = b.cell\n    b.cell.adjacent[b.index] = a.cell\n  }\n}\n\nproto.insert = function(point, random) {\n  //Add point\n  var verts = this.vertices\n  verts.push(point)\n\n  var cell = this.walk(point, random)\n  if(!cell) {\n    return\n  }\n\n  //Alias local properties\n  var d = this.dimension\n  var tuple = this.tuple\n\n  //Degenerate case: If point is coplanar to cell, then walk until we find a non-degenerate boundary\n  for(var i=0; i<=d; ++i) {\n    var vv = cell.vertices[i]\n    if(vv < 0) {\n      tuple[i] = point\n    } else {\n      tuple[i] = verts[vv]\n    }\n  }\n  var o = this.orient(tuple)\n  if(o < 0) {\n    return\n  } else if(o === 0) {\n    cell = this.handleBoundaryDegeneracy(cell, point)\n    if(!cell) {\n      return\n    }\n  }\n\n  //Add peaks\n  this.addPeaks(point, cell)\n}\n\n//Extract all boundary cells\nproto.boundary = function() {\n  var d = this.dimension\n  var boundary = []\n  var cells = this.simplices\n  var nc = cells.length\n  for(var i=0; i<nc; ++i) {\n    var c = cells[i]\n    if(c.boundary) {\n      var bcell = new Array(d)\n      var cv = c.vertices\n      var ptr = 0\n      var parity = 0\n      for(var j=0; j<=d; ++j) {\n        if(cv[j] >= 0) {\n          bcell[ptr++] = cv[j]\n        } else {\n          parity = j&1\n        }\n      }\n      if(parity === (d&1)) {\n        var t = bcell[0]\n        bcell[0] = bcell[1]\n        bcell[1] = t\n      }\n      boundary.push(bcell)\n    }\n  }\n  return boundary\n}\n\nfunction incrementalConvexHull(points, randomSearch) {\n  var n = points.length\n  if(n === 0) {\n    throw new Error(\"Must have at least d+1 points\")\n  }\n  var d = points[0].length\n  if(n <= d) {\n    throw new Error(\"Must input at least d+1 points\")\n  }\n\n  //FIXME: This could be degenerate, but need to select d+1 non-coplanar points to bootstrap process\n  var initialSimplex = points.slice(0, d+1)\n\n  //Make sure initial simplex is positively oriented\n  var o = orient.apply(void 0, initialSimplex)\n  if(o === 0) {\n    throw new Error(\"Input not in general position\")\n  }\n  var initialCoords = new Array(d+1)\n  for(var i=0; i<=d; ++i) {\n    initialCoords[i] = i\n  }\n  if(o < 0) {\n    initialCoords[0] = 1\n    initialCoords[1] = 0\n  }\n\n  //Create initial topological index, glue pointers together (kind of messy)\n  var initialCell = new Simplex(initialCoords, new Array(d+1), false)\n  var boundary = initialCell.adjacent\n  var list = new Array(d+2)\n  for(var i=0; i<=d; ++i) {\n    var verts = initialCoords.slice()\n    for(var j=0; j<=d; ++j) {\n      if(j === i) {\n        verts[j] = -1\n      }\n    }\n    var t = verts[0]\n    verts[0] = verts[1]\n    verts[1] = t\n    var cell = new Simplex(verts, new Array(d+1), true)\n    boundary[i] = cell\n    list[i] = cell\n  }\n  list[d+1] = initialCell\n  for(var i=0; i<=d; ++i) {\n    var verts = boundary[i].vertices\n    var adj = boundary[i].adjacent\n    for(var j=0; j<=d; ++j) {\n      var v = verts[j]\n      if(v < 0) {\n        adj[j] = initialCell\n        continue\n      }\n      for(var k=0; k<=d; ++k) {\n        if(boundary[k].vertices.indexOf(v) < 0) {\n          adj[j] = boundary[k]\n        }\n      }\n    }\n  }\n\n  //Initialize triangles\n  var triangles = new Triangulation(d, initialSimplex, list)\n\n  //Insert remaining points\n  var useRandom = !!randomSearch\n  for(var i=d+1; i<n; ++i) {\n    triangles.insert(points[i], useRandom)\n  }\n  \n  //Extract boundary cells\n  return triangles.boundary()\n}", "'use strict'\n\nmodule.exports = affineHull\n\nvar orient = require('robust-orientation')\n\nfunction linearlyIndependent(points, d) {\n  var nhull = new Array(d+1)\n  for(var i=0; i<points.length; ++i) {\n    nhull[i] = points[i]\n  }\n  for(var i=0; i<=points.length; ++i) {\n    for(var j=points.length; j<=d; ++j) {\n      var x = new Array(d)\n      for(var k=0; k<d; ++k) {\n        x[k] = Math.pow(j+1-i, k)\n      }\n      nhull[j] = x\n    }\n    var o = orient.apply(void 0, nhull)\n    if(o) {\n      return true\n    }\n  }\n  return false\n}\n\nfunction affineHull(points) {\n  var n = points.length\n  if(n === 0) {\n    return []\n  }\n  if(n === 1) {\n    return [0]\n  }\n  var d = points[0].length\n  var frame = [ points[0] ]\n  var index = [ 0 ]\n  for(var i=1; i<n; ++i) {\n    frame.push(points[i])\n    if(!linearlyIndependent(frame, d)) {\n      frame.pop()\n      continue\n    }\n    index.push(i)\n    if(index.length === d+1) {\n      return index\n    }\n  }\n  return index\n}", "'use strict'\n\nmodule.exports = convexHullnD\n\nvar ich = require('incremental-convex-hull')\nvar aff = require('affine-hull')\n\nfunction permute(points, front) {\n  var n = points.length\n  var npoints = new Array(n)\n  for(var i=0; i<front.length; ++i) {\n    npoints[i] = points[front[i]]\n  }\n  var ptr = front.length\n  for(var i=0; i<n; ++i) {\n    if(front.indexOf(i) < 0) {\n      npoints[ptr++] = points[i]\n    }\n  }\n  return npoints\n}\n\nfunction invPermute(cells, front) {\n  var nc = cells.length\n  var nf = front.length\n  for(var i=0; i<nc; ++i) {\n    var c = cells[i]\n    for(var j=0; j<c.length; ++j) {\n      var x = c[j]\n      if(x < nf) {\n        c[j] = front[x]\n      } else {\n        x = x - nf\n        for(var k=0; k<nf; ++k) {\n          if(x >= front[k]) {\n            x += 1\n          }\n        }\n        c[j] = x\n      }\n    }\n  }\n  return cells\n}\n\nfunction convexHullnD(points, d) {\n  try {\n    return ich(points, true)\n  } catch(e) {\n    //If point set is degenerate, try to find a basis and rerun it\n    var ah = aff(points)\n    if(ah.length <= d) {\n      //No basis, no try\n      return []\n    }\n    var npoints = permute(points, ah)\n    var nhull   = ich(npoints, true)\n    return invPermute(nhull, ah)\n  }\n}", "\"use strict\"\n\nvar convexHull1d = require('./lib/ch1d')\nvar convexHull2d = require('./lib/ch2d')\nvar convexHullnd = require('./lib/chnd')\n\nmodule.exports = convexHull\n\nfunction convexHull(points) {\n  var n = points.length\n  if(n === 0) {\n    return []\n  } else if(n === 1) {\n    return [[0]]\n  }\n  var d = points[0].length\n  if(d === 0) {\n    return []\n  } else if(d === 1) {\n    return convexHull1d(points)\n  } else if(d === 2) {\n    return convexHull2d(points)\n  }\n  return convexHullnd(points, d)\n}"],
  "mappings": "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AC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACxY,YAAI,IAAI,IAAI,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACxY,YAAI,IAAI,IAAI,GAAG,CAAC;AAChB,eAAO,EAAE,EAAE,SAAS,CAAC;AAAA,MACvB;AAAA,IACF;AAEA,aAAS,cAAc,KAAK,MAAM,OAAO,KAAK;AAC5C,aAAO,SAAS,kBAAkB,IAAI,IAAI,IAAI,IAAI,IAAI;AACpD,YAAI,IAAI,IAAI,IAAI,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC99E,YAAI,IAAI,IAAI,IAAI,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACppD,YAAI,IAAI,IAAI,GAAG,CAAC;AAChB,eAAO,EAAE,EAAE,SAAS,CAAC;AAAA,MACvB;AAAA,IACF;AAEA,aAAS,YAAY,GAAG;AACtB,UAAI,KACF,MAAM,IAAI,gBACV,MAAM,IAAI,gBAAgB;AAE5B,aAAO,GAAG,WAAW,YAAY,aAAa,cAAc;AAAA,IAC9D;AAEA,QAAI,oBAAoB,YAAY,CAAC;AACrC,QAAI,oBAAoB,YAAY,CAAC;AAErC,QAAI,SAAS;AAAA,MACX,SAAS,eAAe;AAAE,eAAO;AAAA,MAAE;AAAA,MACnC,SAAS,eAAe;AAAE,eAAO;AAAA,MAAE;AAAA,MACnC,SAAS,aAAa,GAAG,GAAG;AAC1B,eAAO,EAAE,CAAC,IAAI,EAAE,CAAC;AAAA,MACnB;AAAA,MACA,SAAS,aAAa,GAAG,GAAG,GAAG;AAC7B,YAAI,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC;AACnC,YAAI,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC;AACnC,YAAI,MAAM,IAAI;AACd,YAAI;AACJ,YAAG,IAAI,GAAG;AACR,cAAG,KAAK,GAAG;AACT,mBAAO;AAAA,UACT,OAAO;AACL,gBAAI,IAAI;AAAA,UACV;AAAA,QACF,WAAU,IAAI,GAAG;AACf,cAAG,KAAK,GAAG;AACT,mBAAO;AAAA,UACT,OAAO;AACL,gBAAI,EAAE,IAAI;AAAA,UACZ;AAAA,QACF,OAAO;AACL,iBAAO;AAAA,QACT;AACA,YAAI,MAAM,YAAY;AACtB,YAAG,OAAO,OAAO,OAAO,CAAC,KAAK;AAC5B,iBAAO;AAAA,QACT;AACA,eAAO,kBAAkB,GAAG,GAAG,CAAC;AAAA,MAClC;AAAA,MACA,SAAS,aAAa,GAAE,GAAE,GAAE,GAAG;AAC7B,YAAI,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC;AACpB,YAAI,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC;AACpB,YAAI,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC;AACpB,YAAI,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC;AACpB,YAAI,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC;AACpB,YAAI,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC;AACpB,YAAI,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC;AACpB,YAAI,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC;AACpB,YAAI,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC;AACpB,YAAI,SAAS,MAAM;AACnB,YAAI,SAAS,MAAM;AACnB,YAAI,SAAS,MAAM;AACnB,YAAI,SAAS,MAAM;AACnB,YAAI,SAAS,MAAM;AACnB,YAAI,SAAS,MAAM;AACnB,YAAI,MAAM,OAAO,SAAS,UAChB,OAAO,SAAS,UAChB,OAAO,SAAS;AAC1B,YAAI,aAAa,KAAK,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM,KAAK,KAAK,IAAI,GAAG,KACnD,KAAK,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM,KAAK,KAAK,IAAI,GAAG,KACnD,KAAK,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM,KAAK,KAAK,IAAI,GAAG;AACpE,YAAI,MAAM,YAAY;AACtB,YAAK,MAAM,OAAS,CAAC,MAAM,KAAM;AAC/B,iBAAO;AAAA,QACT;AACA,eAAO,kBAAkB,GAAE,GAAE,GAAE,CAAC;AAAA,MAClC;AAAA,IACF;AAEA,aAAS,WAAW,MAAM;AACxB,UAAIC,QAAO,OAAO,KAAK,MAAM;AAC7B,UAAG,CAACA,OAAM;AACR,QAAAA,QAAO,OAAO,KAAK,MAAM,IAAI,YAAY,KAAK,MAAM;AAAA,MACtD;AACA,aAAOA,MAAK,MAAM,QAAW,IAAI;AAAA,IACnC;AAEA,aAAS,KAAM,MAAM,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAC3C,aAAO,SAAS,eAAe,IAAI,IAAI,IAAI,IAAI,IAAI;AACjD,gBAAQ,UAAU,QAAQ;AAAA,UACxB,KAAK;AAAA,UACL,KAAK;AACH,mBAAO;AAAA,UACT,KAAK;AACH,mBAAO,GAAG,IAAI,EAAE;AAAA,UAClB,KAAK;AACH,mBAAO,GAAG,IAAI,IAAI,EAAE;AAAA,UACtB,KAAK;AACH,mBAAO,GAAG,IAAI,IAAI,IAAI,EAAE;AAAA,UAC1B,KAAK;AACH,mBAAO,GAAG,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,QAChC;AAEA,YAAI,IAAI,IAAI,MAAM,UAAU,MAAM;AAClC,iBAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,EAAE,GAAG;AACzC,YAAE,CAAC,IAAI,UAAU,CAAC;AAAA,QACpB;AACA,eAAO,KAAK,CAAC;AAAA,MACf;AAAA,IACF;AAEA,aAAS,0BAA0B;AACjC,aAAM,OAAO,UAAU,YAAY;AACjC,eAAO,KAAK,YAAY,OAAO,MAAM,CAAC;AAAA,MACxC;AACA,aAAO,UAAU,KAAK,MAAM,QAAW,CAAC,UAAU,EAAE,OAAO,MAAM,CAAC;AAClE,eAAQ,IAAE,GAAG,KAAG,YAAY,EAAE,GAAG;AAC/B,eAAO,QAAQ,CAAC,IAAI,OAAO,CAAC;AAAA,MAC9B;AAAA,IACF;AAEA,4BAAwB;AAAA;AAAA;;;AC3JxB;AAAA;AAAA;AAEA,WAAO,UAAU;AAEjB,QAAI,SAAS,sBAA8B,CAAC;AAE5C,aAAS,qBAAqB,QAAQ;AACpC,UAAI,IAAI,OAAO;AAEf,UAAG,IAAI,GAAG;AACR,YAAI,SAAS,IAAI,MAAM,CAAC;AACxB,iBAAQ,IAAE,GAAG,IAAE,GAAG,EAAE,GAAG;AACrB,iBAAO,CAAC,IAAI;AAAA,QACd;AAEA,YAAG,MAAM,KACN,OAAO,CAAC,EAAE,CAAC,MAAM,OAAO,CAAC,EAAE,CAAC,KAC5B,OAAO,CAAC,EAAE,CAAC,MAAM,OAAO,CAAC,EAAE,CAAC,GAAG;AAChC,iBAAO,CAAC,CAAC;AAAA,QACX;AAEA,eAAO;AAAA,MACT;AAGA,UAAI,SAAS,IAAI,MAAM,CAAC;AACxB,eAAQ,IAAE,GAAG,IAAE,GAAG,EAAE,GAAG;AACrB,eAAO,CAAC,IAAI;AAAA,MACd;AACA,aAAO,KAAK,SAAS,GAAE,GAAG;AACxB,YAAI,IAAI,OAAO,CAAC,EAAE,CAAC,IAAE,OAAO,CAAC,EAAE,CAAC;AAChC,YAAG,GAAG;AACJ,iBAAO;AAAA,QACT;AACA,eAAO,OAAO,CAAC,EAAE,CAAC,IAAI,OAAO,CAAC,EAAE,CAAC;AAAA,MACnC,CAAC;AAGD,UAAI,QAAQ,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC;AACjC,UAAI,QAAQ,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC;AAEjC,eAAQ,IAAE,GAAG,IAAE,GAAG,EAAE,GAAG;AACrB,YAAI,MAAM,OAAO,CAAC;AAClB,YAAI,IAAM,OAAO,GAAG;AAGpB,YAAI,IAAI,MAAM;AACd,eAAM,IAAI,KAAK;AAAA,UACX,OAAO,MAAM,IAAE,CAAC,CAAC;AAAA,UACjB,OAAO,MAAM,IAAE,CAAC,CAAC;AAAA,UACjB;AAAA,QAAC,KAAK,GAAG;AACX,eAAK;AACL,gBAAM,IAAI;AAAA,QACZ;AACA,cAAM,KAAK,GAAG;AAGd,YAAI,MAAM;AACV,eAAM,IAAI,KAAK;AAAA,UACX,OAAO,MAAM,IAAE,CAAC,CAAC;AAAA,UACjB,OAAO,MAAM,IAAE,CAAC,CAAC;AAAA,UACjB;AAAA,QAAC,KAAK,GAAG;AACX,eAAK;AACL,gBAAM,IAAI;AAAA,QACZ;AACA,cAAM,KAAK,GAAG;AAAA,MAChB;AAGA,UAAI,SAAS,IAAI,MAAM,MAAM,SAAS,MAAM,SAAS,CAAC;AACtD,UAAI,MAAS;AACb,eAAQ,IAAE,GAAG,KAAG,MAAM,QAAQ,IAAE,IAAI,EAAE,GAAG;AACvC,eAAO,KAAK,IAAI,MAAM,CAAC;AAAA,MACzB;AACA,eAAQ,IAAE,MAAM,SAAO,GAAG,IAAE,GAAG,EAAE,GAAG;AAClC,eAAO,KAAK,IAAI,MAAM,CAAC;AAAA,MACzB;AAGA,aAAO;AAAA,IACT;AAAA;AAAA;;;AChFA;AAAA;AAAA;AAEA,WAAO,UAAU;AAEjB,QAAI,eAAe;AAEnB,aAAS,aAAa,QAAQ;AAC5B,UAAI,OAAO,aAAa,MAAM;AAC9B,UAAI,IAAI,KAAK;AACb,UAAG,KAAK,GAAG;AACT,eAAO,CAAC;AAAA,MACV;AACA,UAAI,QAAQ,IAAI,MAAM,CAAC;AACvB,UAAI,IAAI,KAAK,IAAE,CAAC;AAChB,eAAQ,IAAE,GAAG,IAAE,GAAG,EAAE,GAAG;AACrB,YAAI,IAAI,KAAK,CAAC;AACd,cAAM,CAAC,IAAI,CAAC,GAAE,CAAC;AACf,YAAI;AAAA,MACN;AACA,aAAO;AAAA,IACT;AAAA;AAAA;;;ACpBA;AAAA;AAAA;AAAA;AAYA,QAAI,WAAW;AAGf,YAAQ,WAAY;AACpB,YAAQ,UAAa;AACrB,YAAQ,UAAY,MAAK,WAAS;AAGlC,YAAQ,OAAO,SAAS,GAAG;AACzB,cAAQ,IAAI,MAAM,IAAI;AAAA,IACxB;AAGA,YAAQ,MAAM,SAAS,GAAG;AACxB,UAAI,OAAO,KAAM,WAAS;AAC1B,cAAQ,IAAI,QAAQ;AAAA,IACtB;AAGA,YAAQ,MAAM,SAAS,GAAG,GAAG;AAC3B,aAAO,KAAM,IAAI,KAAK,EAAE,IAAI;AAAA,IAC9B;AAGA,YAAQ,MAAM,SAAS,GAAG,GAAG;AAC3B,aAAO,KAAM,IAAI,KAAK,EAAE,IAAI;AAAA,IAC9B;AAGA,YAAQ,SAAS,SAAS,GAAG;AAC3B,aAAO,EAAE,IAAK,IAAE,MAAQ,CAAC,CAAC;AAAA,IAC5B;AAGA,YAAQ,OAAO,SAAS,GAAG;AACzB,UAAI,GAAG;AACP,WAAS,IAAI,UAAW;AAAG,aAAO;AAClC,eAAS,IAAI,QAAW;AAAG,aAAO;AAAO,WAAK;AAC9C,eAAS,IAAI,OAAW;AAAG,aAAO;AAAO,WAAK;AAC9C,eAAS,IAAI,MAAW;AAAG,aAAO;AAAO,WAAK;AAC9C,aAAO,IAAK,KAAK;AAAA,IACnB;AAGA,YAAQ,QAAQ,SAAS,GAAG;AAC1B,aAAS,KAAK,MAAc,IAAK,KAAK,MAAa,IAAK,KAAK,MAAY,IAChE,KAAK,MAAW,IAAK,KAAK,MAAU,IAAK,KAAK,MAAS,IACvD,KAAK,MAAQ,IAAK,KAAK,MAAO,IAAK,KAAK,KAAM,IAAI;AAAA,IAC7D;AAGA,YAAQ,WAAW,SAAS,GAAG;AAC7B,UAAI,KAAM,MAAM,IAAK;AACrB,WAAK,IAAI,cAAgB,MAAM,IAAK;AACpC,cAAS,KAAK,MAAM,KAAK,aAAa,aAAe;AAAA,IACvD;AAGA,aAAS,mBAAmB,GAAG;AAC7B,UAAI,IAAI;AACR,WAAK,CAAC;AACN,UAAI;AAAG;AACP,UAAI,IAAI;AAAY,aAAK;AACzB,UAAI,IAAI;AAAY,aAAK;AACzB,UAAI,IAAI;AAAY,aAAK;AACzB,UAAI,IAAI;AAAY,aAAK;AACzB,UAAI,IAAI;AAAY,aAAK;AACzB,aAAO;AAAA,IACT;AACA,YAAQ,qBAAqB;AAG7B,YAAQ,WAAW,SAAS,GAAG;AAC7B,WAAK,MAAM;AACX,QAAE;AACF,WAAK,MAAM;AACX,WAAK,MAAM;AACX,WAAK,MAAM;AACX,WAAK,MAAM;AACX,WAAK,MAAM;AACX,aAAO,IAAI;AAAA,IACb;AAGA,YAAQ,WAAW,SAAS,GAAG;AAC7B,WAAK,MAAM;AACX,WAAK,MAAM;AACX,WAAK,MAAM;AACX,WAAK,MAAM;AACX,WAAK,MAAM;AACX,aAAO,KAAK,MAAI;AAAA,IAClB;AAGA,YAAQ,SAAS,SAAS,GAAG;AAC3B,WAAK,MAAM;AACX,WAAK,MAAM;AACX,WAAK,MAAM;AACX,WAAK;AACL,aAAQ,UAAW,IAAK;AAAA,IAC1B;AAEA,QAAI,gBAAgB,IAAI,MAAM,GAAG;AAEjC,KAAC,SAAS,KAAK;AACb,eAAQ,IAAE,GAAG,IAAE,KAAK,EAAE,GAAG;AACvB,YAAI,IAAI,GAAG,IAAI,GAAG,IAAI;AACtB,aAAK,OAAO,GAAG,GAAG,OAAO,GAAG;AAC1B,gBAAM;AACN,eAAK,IAAI;AACT,YAAE;AAAA,QACJ;AACA,YAAI,CAAC,IAAK,KAAK,IAAK;AAAA,MACtB;AAAA,IACF,GAAG,aAAa;AAGhB,YAAQ,UAAU,SAAS,GAAG;AAC5B,aAAS,cAAe,IAAY,GAAI,KAAK,KACpC,cAAe,MAAM,IAAM,GAAI,KAAK,KACpC,cAAe,MAAM,KAAM,GAAI,KAAK,IACpC,cAAe,MAAM,KAAM,GAAI;AAAA,IAC1C;AAGA,YAAQ,cAAc,SAAS,GAAG,GAAG;AACnC,WAAK;AACL,WAAK,IAAK,KAAK,KAAM;AACrB,WAAK,IAAK,KAAK,KAAM;AACrB,WAAK,IAAK,KAAK,KAAM;AACrB,WAAK,IAAK,KAAK,KAAM;AAErB,WAAK;AACL,WAAK,IAAK,KAAK,KAAM;AACrB,WAAK,IAAK,KAAK,KAAM;AACrB,WAAK,IAAK,KAAK,KAAM;AACrB,WAAK,IAAK,KAAK,KAAM;AAErB,aAAO,IAAK,KAAK;AAAA,IACnB;AAGA,YAAQ,gBAAgB,SAAS,GAAG,GAAG;AACrC,UAAK,MAAM,IAAK;AAChB,WAAK,IAAK,MAAM,KAAO;AACvB,WAAK,IAAK,MAAM,KAAO;AACvB,WAAK,IAAK,MAAM,KAAO;AACvB,WAAK,IAAK,MAAM,MAAO;AACvB,aAAQ,KAAK,MAAO;AAAA,IACtB;AAIA,YAAQ,cAAc,SAAS,GAAG,GAAG,GAAG;AACtC,WAAK;AACL,WAAM,IAAK,KAAG,MAAO;AACrB,WAAM,IAAK,KAAG,KAAO;AACrB,WAAM,IAAK,KAAG,KAAO;AACrB,WAAM,IAAK,KAAG,KAAO;AAErB,WAAK;AACL,WAAM,IAAK,KAAG,MAAO;AACrB,WAAM,IAAK,KAAG,KAAO;AACrB,WAAM,IAAK,KAAG,KAAO;AACrB,WAAM,IAAK,KAAG,KAAO;AACrB,WAAM,KAAK;AAEX,WAAK;AACL,WAAM,IAAK,KAAG,MAAO;AACrB,WAAM,IAAK,KAAG,KAAO;AACrB,WAAM,IAAK,KAAG,KAAO;AACrB,WAAM,IAAK,KAAG,KAAO;AAErB,aAAO,IAAK,KAAK;AAAA,IACnB;AAGA,YAAQ,gBAAgB,SAAS,GAAG,GAAG;AACrC,UAAK,MAAM,IAAW;AACtB,WAAK,IAAK,MAAI,KAAQ;AACtB,WAAK,IAAK,MAAI,KAAQ;AACtB,WAAK,IAAK,MAAI,KAAQ;AACtB,WAAK,IAAK,MAAI,MAAQ;AACtB,aAAQ,KAAG,MAAK;AAAA,IAClB;AAGA,YAAQ,kBAAkB,SAAS,GAAG;AACpC,UAAI,IAAI,IAAK,IAAI;AACjB,aAAQ,IAAI,KAAQ,CAAC,IAAI,CAAC,CAAC,KAAK,MAAQ,mBAAmB,CAAC,IAAI;AAAA,IAClE;AAAA;AAAA;;;AC1MA;AAAA;AAAA;AAAA;AAEA,WAAO,UAAU;AAEjB,aAAS,UAAU,OAAO;AACxB,WAAK,QAAQ,IAAI,MAAM,KAAK;AAC5B,WAAK,QAAQ,IAAI,MAAM,KAAK;AAE5B,eAAQ,IAAE,GAAG,IAAE,OAAO,EAAE,GAAG;AACzB,aAAK,MAAM,CAAC,IAAI;AAChB,aAAK,MAAM,CAAC,IAAI;AAAA,MAClB;AAAA,IACF;AAEA,QAAI,QAAQ,UAAU;AAEtB,WAAO,eAAe,OAAO,UAAU;AAAA,MACrC,OAAO,WAAW;AAChB,eAAO,KAAK,MAAM;AAAA,MACpB;AAAA,IACF,CAAC;AAED,UAAM,UAAU,WAAW;AACzB,UAAI,IAAI,KAAK,MAAM;AACnB,WAAK,MAAM,KAAK,CAAC;AACjB,WAAK,MAAM,KAAK,CAAC;AACjB,aAAO;AAAA,IACT;AAEA,UAAM,OAAO,SAAS,GAAG;AACvB,UAAI,KAAK;AACT,UAAI,QAAQ,KAAK;AACjB,aAAM,MAAM,CAAC,MAAM,GAAG;AACpB,YAAI,MAAM,CAAC;AAAA,MACb;AACA,aAAM,MAAM,EAAE,MAAM,GAAG;AACrB,YAAI,IAAI,MAAM,EAAE;AAChB,cAAM,EAAE,IAAI;AACZ,aAAK;AAAA,MACP;AACA,aAAO;AAAA,IACT;AAEA,UAAM,OAAO,SAAS,GAAG,GAAG;AAC1B,UAAI,KAAK,KAAK,KAAK,CAAC,GAChB,KAAK,KAAK,KAAK,CAAC;AACpB,UAAG,OAAO,IAAI;AACZ;AAAA,MACF;AACA,UAAI,QAAQ,KAAK,OACb,QAAQ,KAAK,OACb,KAAQ,MAAM,EAAE,GAChB,KAAQ,MAAM,EAAE;AACpB,UAAG,KAAK,IAAI;AACV,cAAM,EAAE,IAAI;AAAA,MACd,WAAU,KAAK,IAAI;AACjB,cAAM,EAAE,IAAI;AAAA,MACd,OAAO;AACL,cAAM,EAAE,IAAI;AACZ,UAAE,MAAM,EAAE;AAAA,MACZ;AAAA,IACF;AAAA;AAAA;;;AC7DA;AAAA;AAAA;AAAA;AAEA,QAAI,OAAY;AAAhB,QACI,YAAY;AAGhB,aAAS,UAAU,OAAO;AACxB,UAAI,IAAI,GACJ,MAAM,KAAK;AACf,eAAQ,IAAE,GAAG,KAAG,MAAM,QAAQ,IAAE,IAAI,EAAE,GAAG;AACvC,YAAI,IAAI,GAAG,MAAM,CAAC,EAAE,MAAM;AAAA,MAC5B;AACA,aAAO,IAAE;AAAA,IACX;AACA,YAAQ,YAAY;AAGpB,aAAS,cAAc,OAAO;AAC5B,UAAI,KAAK,IACL,MAAM,KAAK;AACf,eAAQ,IAAE,GAAG,KAAG,MAAM,QAAQ,IAAE,IAAI,EAAE,GAAG;AACvC,YAAI,IAAI,MAAM,CAAC;AACf,iBAAQ,IAAE,GAAG,KAAG,EAAE,QAAQ,IAAE,IAAI,EAAE,GAAG;AACnC,eAAK,IAAI,IAAI,EAAE,CAAC,CAAC;AAAA,QACnB;AAAA,MACF;AACA,aAAO,KAAG;AAAA,IACZ;AACA,YAAQ,gBAAgB;AAGxB,aAAS,WAAW,OAAO;AACzB,UAAI,SAAS,IAAI,MAAM,MAAM,MAAM;AACnC,eAAQ,IAAE,GAAG,KAAG,MAAM,QAAQ,IAAE,IAAI,EAAE,GAAG;AACvC,eAAO,CAAC,IAAI,MAAM,CAAC,EAAE,MAAM,CAAC;AAAA,MAC9B;AACA,aAAO;AAAA,IACT;AACA,YAAQ,aAAa;AAGrB,aAAS,aAAa,GAAG,GAAG;AAC1B,UAAI,IAAI,EAAE,QACN,IAAI,EAAE,SAAS,EAAE,QACjB,MAAM,KAAK;AACf,UAAG,GAAG;AACJ,eAAO;AAAA,MACT;AACA,cAAO,GAAG;AAAA,QACR,KAAK;AACH,iBAAO;AAAA,QACT,KAAK;AACH,iBAAO,EAAE,CAAC,IAAI,EAAE,CAAC;AAAA,QACnB,KAAK;AACH,cAAI,IAAI,EAAE,CAAC,IAAE,EAAE,CAAC,IAAE,EAAE,CAAC,IAAE,EAAE,CAAC;AAC1B,cAAG,GAAG;AACJ,mBAAO;AAAA,UACT;AACA,iBAAO,IAAI,EAAE,CAAC,GAAE,EAAE,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC,GAAE,EAAE,CAAC,CAAC;AAAA,QACvC,KAAK;AACH,cAAI,KAAK,EAAE,CAAC,IAAE,EAAE,CAAC,GACb,KAAK,EAAE,CAAC,IAAE,EAAE,CAAC;AACjB,cAAI,KAAG,EAAE,CAAC,KAAK,KAAG,EAAE,CAAC;AACrB,cAAG,GAAG;AACJ,mBAAO;AAAA,UACT;AACA,cAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GACnB,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GACnB,IAAK,IAAI,IAAI,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,EAAE,CAAC,CAAC;AACrC,cAAG,GAAG;AACJ,mBAAO;AAAA,UACT;AACA,iBAAO,IAAI,KAAG,EAAE,CAAC,GAAG,EAAE,IAAI,IAAI,KAAG,EAAE,CAAC,GAAG,EAAE;AAAA,QAI3C;AACE,cAAI,KAAK,EAAE,MAAM,CAAC;AAClB,aAAG,KAAK;AACR,cAAI,KAAK,EAAE,MAAM,CAAC;AAClB,aAAG,KAAK;AACR,mBAAQ,IAAE,GAAG,IAAE,GAAG,EAAE,GAAG;AACrB,gBAAI,GAAG,CAAC,IAAI,GAAG,CAAC;AAChB,gBAAG,GAAG;AACJ,qBAAO;AAAA,YACT;AAAA,UACF;AACA,iBAAO;AAAA,MACX;AAAA,IACF;AACA,YAAQ,eAAe;AAEvB,aAAS,cAAc,GAAG,GAAG;AAC3B,aAAO,aAAa,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAAA,IAChC;AAGA,aAAS,UAAU,OAAO,MAAM;AAC9B,UAAG,MAAM;AACP,YAAI,MAAM,MAAM;AAChB,YAAI,SAAS,IAAI,MAAM,GAAG;AAC1B,iBAAQ,IAAE,GAAG,IAAE,KAAK,EAAE,GAAG;AACvB,iBAAO,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC,CAAC;AAAA,QAChC;AACA,eAAO,KAAK,aAAa;AACzB,iBAAQ,IAAE,GAAG,IAAE,KAAK,EAAE,GAAG;AACvB,gBAAM,CAAC,IAAI,OAAO,CAAC,EAAE,CAAC;AACtB,eAAK,CAAC,IAAI,OAAO,CAAC,EAAE,CAAC;AAAA,QACvB;AACA,eAAO;AAAA,MACT,OAAO;AACL,cAAM,KAAK,YAAY;AACvB,eAAO;AAAA,MACT;AAAA,IACF;AACA,YAAQ,YAAY;AAGpB,aAAS,OAAO,OAAO;AACrB,UAAG,MAAM,WAAW,GAAG;AACrB,eAAO,CAAC;AAAA,MACV;AACA,UAAI,MAAM,GACN,MAAM,MAAM;AAChB,eAAQ,IAAE,GAAG,IAAE,KAAK,EAAE,GAAG;AACvB,YAAI,IAAI,MAAM,CAAC;AACf,YAAG,aAAa,GAAG,MAAM,IAAE,CAAC,CAAC,GAAG;AAC9B,cAAG,MAAM,KAAK;AACZ;AACA;AAAA,UACF;AACA,gBAAM,KAAK,IAAI;AAAA,QACjB;AAAA,MACF;AACA,YAAM,SAAS;AACf,aAAO;AAAA,IACT;AACA,YAAQ,SAAS;AAGjB,aAAS,SAAS,OAAO,GAAG;AAC1B,UAAI,KAAK,GACL,KAAK,MAAM,SAAO,GAClB,IAAK;AACT,aAAO,MAAM,IAAI;AACf,YAAI,MAAO,KAAK,MAAO,GACnB,IAAM,aAAa,MAAM,GAAG,GAAG,CAAC;AACpC,YAAG,KAAK,GAAG;AACT,cAAG,MAAM,GAAG;AACV,gBAAI;AAAA,UACN;AACA,eAAK,MAAM;AAAA,QACb,WAAU,IAAI,GAAG;AACf,eAAK,MAAM;AAAA,QACb;AAAA,MACF;AACA,aAAO;AAAA,IACT;AACA,YAAQ,WAAW;AAGnB,aAAS,UAAU,YAAY,UAAU;AACvC,UAAI,QAAQ,IAAI,MAAM,WAAW,MAAM;AACvC,eAAQ,IAAE,GAAG,KAAG,MAAM,QAAQ,IAAE,IAAI,EAAE,GAAG;AACvC,cAAM,CAAC,IAAI,CAAC;AAAA,MACd;AACA,UAAI,IAAI,CAAC;AACT,eAAQ,IAAE,GAAG,IAAE,SAAS,QAAQ,IAAE,GAAG,EAAE,GAAG;AACxC,YAAI,IAAI,SAAS,CAAC;AAClB,YAAI,KAAK,EAAE;AACX,iBAAQ,IAAE,GAAG,KAAI,KAAG,IAAK,IAAE,IAAI,EAAE,GAAG;AAClC,YAAE,SAAS,KAAK,SAAS,CAAC;AAC1B,cAAI,IAAI;AACR,mBAAQ,IAAE,GAAG,IAAE,IAAI,EAAE,GAAG;AACtB,gBAAG,IAAK,KAAG,GAAI;AACb,gBAAE,GAAG,IAAI,EAAE,CAAC;AAAA,YACd;AAAA,UACF;AACA,cAAI,MAAI,SAAS,YAAY,CAAC;AAC9B,cAAG,MAAM,GAAG;AACV;AAAA,UACF;AACA,iBAAM,MAAM;AACV,kBAAM,KAAK,EAAE,KAAK,CAAC;AACnB,gBAAG,OAAO,WAAW,UAAU,aAAa,WAAW,GAAG,GAAG,CAAC,MAAM,GAAG;AACrE;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AACA,aAAO;AAAA,IACT;AACA,YAAQ,YAAY;AAGpB,aAAS,KAAK,OAAO,cAAc;AACjC,UAAG,CAAC,cAAc;AAChB,eAAO,UAAU,OAAO,SAAS,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC;AAAA,MACvD;AACA,UAAI,MAAM,IAAI,MAAM,YAAY;AAChC,eAAQ,IAAE,GAAG,IAAE,cAAc,EAAE,GAAG;AAChC,YAAI,CAAC,IAAI,CAAC;AAAA,MACZ;AACA,eAAQ,IAAE,GAAG,MAAI,MAAM,QAAQ,IAAE,KAAK,EAAE,GAAG;AACzC,YAAI,IAAI,MAAM,CAAC;AACf,iBAAQ,IAAE,GAAG,KAAG,EAAE,QAAQ,IAAE,IAAI,EAAE,GAAG;AACnC,cAAI,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC;AAAA,QAClB;AAAA,MACF;AACA,aAAO;AAAA,IACT;AACA,YAAQ,OAAO;AAGf,aAAS,QAAQ,OAAO;AACtB,UAAI,SAAS,CAAC;AACd,eAAQ,IAAE,GAAG,KAAG,MAAM,QAAQ,IAAE,IAAI,EAAE,GAAG;AACvC,YAAI,IAAI,MAAM,CAAC,GACX,KAAK,EAAE,SAAO;AAClB,iBAAQ,IAAE,GAAG,KAAI,KAAG,IAAK,IAAE,IAAI,EAAE,GAAG;AAClC,cAAI,IAAI,CAAC;AACT,mBAAQ,IAAE,GAAG,IAAE,IAAI,EAAE,GAAG;AACtB,gBAAI,MAAM,IAAK,GAAG;AAChB,gBAAE,KAAK,EAAE,CAAC,CAAC;AAAA,YACb;AAAA,UACF;AACA,iBAAO,KAAK,CAAC;AAAA,QACf;AAAA,MACF;AACA,aAAO,UAAU,MAAM;AAAA,IACzB;AACA,YAAQ,UAAU;AAGlB,aAAS,SAAS,OAAO,GAAG;AAC1B,UAAG,IAAI,GAAG;AACR,eAAO,CAAC;AAAA,MACV;AACA,UAAI,SAAS,CAAC,GACV,MAAU,KAAI,IAAE,KAAI;AACxB,eAAQ,IAAE,GAAG,IAAE,MAAM,QAAQ,EAAE,GAAG;AAChC,YAAI,IAAI,MAAM,CAAC;AACf,iBAAQ,IAAE,IAAI,IAAG,KAAG,EAAE,QAAS,IAAE,KAAK,gBAAgB,CAAC,GAAG;AACxD,cAAI,IAAI,IAAI,MAAM,IAAE,CAAC,GACjB,IAAI;AACR,mBAAQ,IAAE,GAAG,IAAE,EAAE,QAAQ,EAAE,GAAG;AAC5B,gBAAG,IAAK,KAAG,GAAI;AACb,gBAAE,GAAG,IAAI,EAAE,CAAC;AAAA,YACd;AAAA,UACF;AACA,iBAAO,KAAK,CAAC;AAAA,QACf;AAAA,MACF;AACA,aAAO,UAAU,MAAM;AAAA,IACzB;AACA,YAAQ,WAAW;AAGnB,aAAS,SAAS,OAAO;AACvB,UAAI,MAAM,CAAC;AACX,eAAQ,IAAE,GAAE,KAAG,MAAM,QAAQ,IAAE,IAAI,EAAE,GAAG;AACtC,YAAI,IAAI,MAAM,CAAC;AACf,iBAAQ,IAAE,GAAE,KAAG,EAAE,QAAQ,IAAE,IAAI,EAAE,GAAG;AAClC,cAAI,IAAI,IAAI,MAAM,EAAE,SAAO,CAAC;AAC5B,mBAAQ,IAAE,GAAG,IAAE,GAAG,IAAE,IAAI,EAAE,GAAG;AAC3B,gBAAG,MAAM,GAAG;AACV,gBAAE,GAAG,IAAI,EAAE,CAAC;AAAA,YACd;AAAA,UACF;AACA,cAAI,KAAK,CAAC;AAAA,QACZ;AAAA,MACF;AACA,aAAO,UAAU,GAAG;AAAA,IACtB;AACA,YAAQ,WAAW;AAGnB,aAAS,0BAA0B,OAAO,cAAc;AACtD,UAAI,SAAS,IAAI,UAAU,YAAY;AACvC,eAAQ,IAAE,GAAG,IAAE,MAAM,QAAQ,EAAE,GAAG;AAChC,YAAI,IAAI,MAAM,CAAC;AACf,iBAAQ,IAAE,GAAG,IAAE,EAAE,QAAQ,EAAE,GAAG;AAC5B,mBAAQ,IAAE,IAAE,GAAG,IAAE,EAAE,QAAQ,EAAE,GAAG;AAC9B,mBAAO,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAAA,UACxB;AAAA,QACF;AAAA,MACF;AACA,UAAI,aAAa,CAAC,GACd,mBAAmB,OAAO;AAC9B,eAAQ,IAAE,GAAG,IAAE,iBAAiB,QAAQ,EAAE,GAAG;AAC3C,yBAAiB,CAAC,IAAI;AAAA,MACxB;AACA,eAAQ,IAAE,GAAG,IAAE,MAAM,QAAQ,EAAE,GAAG;AAChC,YAAI,IAAI,OAAO,KAAK,MAAM,CAAC,EAAE,CAAC,CAAC;AAC/B,YAAG,iBAAiB,CAAC,IAAI,GAAG;AAC1B,2BAAiB,CAAC,IAAI,WAAW;AACjC,qBAAW,KAAK,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;AAAA,QACrC,OAAO;AACL,qBAAW,iBAAiB,CAAC,CAAC,EAAE,KAAK,MAAM,CAAC,EAAE,MAAM,CAAC,CAAC;AAAA,QACxD;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAGA,aAAS,2BAA2B,OAAO;AACzC,UAAI,WAAY,OAAO,UAAU,SAAS,OAAO,CAAC,CAAC,CAAC,GAChD,SAAY,IAAI,UAAU,SAAS,MAAM;AAC7C,eAAQ,IAAE,GAAG,IAAE,MAAM,QAAQ,EAAE,GAAG;AAChC,YAAI,IAAI,MAAM,CAAC;AACf,iBAAQ,IAAE,GAAG,IAAE,EAAE,QAAQ,EAAE,GAAG;AAC5B,cAAI,KAAK,SAAS,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;AAClC,mBAAQ,IAAE,IAAE,GAAG,IAAE,EAAE,QAAQ,EAAE,GAAG;AAC9B,mBAAO,KAAK,IAAI,SAAS,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAAA,UAC5C;AAAA,QACF;AAAA,MACF;AACA,UAAI,aAAoB,CAAC,GACrB,mBAAoB,OAAO;AAC/B,eAAQ,IAAE,GAAG,IAAE,iBAAiB,QAAQ,EAAE,GAAG;AAC3C,yBAAiB,CAAC,IAAI;AAAA,MACxB;AACA,eAAQ,IAAE,GAAG,IAAE,MAAM,QAAQ,EAAE,GAAG;AAChC,YAAI,IAAI,OAAO,KAAK,SAAS,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACrD,YAAG,iBAAiB,CAAC,IAAI,GAAG;AAC1B,2BAAiB,CAAC,IAAI,WAAW;AACjC,qBAAW,KAAK,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;AAAA,QACrC,OAAO;AACL,qBAAW,iBAAiB,CAAC,CAAC,EAAE,KAAK,MAAM,CAAC,EAAE,MAAM,CAAC,CAAC;AAAA,QACxD;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAGA,aAAS,oBAAoB,OAAO,cAAc;AAChD,UAAG,cAAc;AACf,eAAO,0BAA0B,OAAO,YAAY;AAAA,MACtD;AACA,aAAO,2BAA2B,KAAK;AAAA,IACzC;AACA,YAAQ,sBAAsB;AAAA;AAAA;;;ACrV9B;AAAA;AAAA;AAMA,WAAO,UAAU;AAEjB,QAAI,SAAS;AACb,QAAI,cAAc,mBAA8B;AAMhD,aAAS,QAAQ,UAAU,UAAU,UAAU;AAC7C,WAAK,WAAW;AAChB,WAAK,WAAW;AAChB,WAAK,WAAW;AAChB,WAAK,cAAc;AAAA,IACrB;AAEA,YAAQ,UAAU,OAAO,WAAW;AAClC,UAAI,IAAI,KAAK,SAAS,CAAC;AACvB,WAAK,SAAS,CAAC,IAAI,KAAK,SAAS,CAAC;AAClC,WAAK,SAAS,CAAC,IAAI;AACnB,UAAI,IAAI,KAAK,SAAS,CAAC;AACvB,WAAK,SAAS,CAAC,IAAI,KAAK,SAAS,CAAC;AAClC,WAAK,SAAS,CAAC,IAAI;AAAA,IACrB;AAEA,aAAS,UAAU,UAAU,MAAM,OAAO;AACxC,WAAK,WAAW;AAChB,WAAK,OAAO;AACZ,WAAK,QAAQ;AAAA,IACf;AAEA,aAAS,YAAY,GAAG,GAAG;AACzB,aAAO,YAAY,EAAE,UAAU,EAAE,QAAQ;AAAA,IAC3C;AAEA,aAAS,WAAW,GAAG;AACrB,UAAI,OAAO,CAAC,qDAAqD;AACjE,eAAQ,IAAE,GAAG,KAAG,GAAG,EAAE,GAAG;AACtB,YAAG,IAAI,GAAG;AACR,eAAK,KAAK,GAAG;AAAA,QACf;AACA,aAAK,KAAK,UAAU,GAAG,GAAG;AAAA,MAC5B;AACA,WAAK,KAAK,iBAAiB;AAC3B,UAAI,OAAO,IAAI,SAAS,QAAQ,KAAK,KAAK,EAAE,CAAC;AAC7C,UAAI,OAAO,OAAO,IAAE,CAAC;AACrB,UAAG,CAAC,MAAM;AACR,eAAO;AAAA,MACT;AACA,aAAO,KAAK,IAAI;AAAA,IAClB;AAEA,QAAI,QAAQ,CAAC;AAEb,aAAS,cAAc,WAAW,UAAU,WAAW;AACrD,WAAK,YAAY;AACjB,WAAK,WAAW;AAChB,WAAK,YAAY;AACjB,WAAK,WAAW,UAAU,OAAO,SAAS,GAAG;AAC3C,eAAO,CAAC,EAAE;AAAA,MACZ,CAAC;AAED,WAAK,QAAQ,IAAI,MAAM,YAAU,CAAC;AAClC,eAAQ,IAAE,GAAG,KAAG,WAAW,EAAE,GAAG;AAC9B,aAAK,MAAM,CAAC,IAAI,KAAK,SAAS,CAAC;AAAA,MACjC;AAEA,UAAI,IAAI,MAAM,SAAS;AACvB,UAAG,CAAC,GAAG;AACL,YAAI,MAAM,SAAS,IAAI,WAAW,SAAS;AAAA,MAC7C;AACA,WAAK,SAAS;AAAA,IAChB;AAEA,QAAI,QAAQ,cAAc;AAG1B,UAAM,2BAA2B,SAAS,MAAM,OAAO;AACrD,UAAI,IAAI,KAAK;AACb,UAAI,IAAI,KAAK,SAAS,SAAS;AAC/B,UAAI,QAAQ,KAAK;AACjB,UAAI,QAAQ,KAAK;AAGjB,UAAI,UAAU,CAAE,IAAK;AACrB,WAAK,cAAc,CAAC;AACpB,aAAM,QAAQ,SAAS,GAAG;AACxB,eAAO,QAAQ,IAAI;AACnB,YAAI,YAAY,KAAK;AACrB,YAAI,UAAU,KAAK;AACnB,iBAAQ,IAAE,GAAG,KAAG,GAAG,EAAE,GAAG;AACtB,cAAI,WAAW,QAAQ,CAAC;AACxB,cAAG,CAAC,SAAS,YAAY,SAAS,eAAe,CAAC,GAAG;AACnD;AAAA,UACF;AACA,cAAI,KAAK,SAAS;AAClB,mBAAQ,IAAE,GAAG,KAAG,GAAG,EAAE,GAAG;AACtB,gBAAI,KAAK,GAAG,CAAC;AACb,gBAAG,KAAK,GAAG;AACT,oBAAM,CAAC,IAAI;AAAA,YACb,OAAO;AACL,oBAAM,CAAC,IAAI,MAAM,EAAE;AAAA,YACrB;AAAA,UACF;AACA,cAAI,IAAI,KAAK,OAAO;AACpB,cAAG,IAAI,GAAG;AACR,mBAAO;AAAA,UACT;AACA,mBAAS,cAAc,CAAC;AACxB,cAAG,MAAM,GAAG;AACV,oBAAQ,KAAK,QAAQ;AAAA,UACvB;AAAA,QACF;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAEA,UAAM,OAAO,SAAS,OAAO,QAAQ;AAEnC,UAAI,IAAI,KAAK,SAAS,SAAS;AAC/B,UAAI,IAAI,KAAK;AACb,UAAI,QAAQ,KAAK;AACjB,UAAI,QAAQ,KAAK;AAGjB,UAAI,YAAY,SAAU,KAAK,SAAS,SAAS,KAAK,OAAO,IAAG,IAAK,KAAK,SAAS,SAAO;AAC1F,UAAI,OAAO,KAAK,SAAU,SAAU;AAGtC;AACE,eAAM,CAAC,KAAK,UAAU;AACpB,cAAI,YAAY,KAAK;AACrB,cAAI,UAAU,KAAK;AAEnB,mBAAQ,IAAE,GAAG,KAAG,GAAG,EAAE,GAAG;AACtB,kBAAM,CAAC,IAAI,MAAM,UAAU,CAAC,CAAC;AAAA,UAC/B;AACA,eAAK,cAAc;AAGnB,mBAAQ,IAAE,GAAG,KAAG,GAAG,EAAE,GAAG;AACtB,gBAAI,WAAW,QAAQ,CAAC;AACxB,gBAAG,SAAS,eAAe,GAAG;AAC5B;AAAA,YACF;AACA,gBAAI,OAAO,MAAM,CAAC;AAClB,kBAAM,CAAC,IAAI;AACX,gBAAI,IAAI,KAAK,OAAO;AACpB,kBAAM,CAAC,IAAI;AACX,gBAAG,IAAI,GAAG;AACR,qBAAO;AACP,uBAAS;AAAA,YACX,OAAO;AACL,kBAAG,CAAC,SAAS,UAAU;AACrB,yBAAS,cAAc;AAAA,cACzB,OAAO;AACL,yBAAS,cAAc,CAAC;AAAA,cAC1B;AAAA,YACF;AAAA,UACF;AACA;AAAA,QACF;AAEA,aAAO;AAAA,IACT;AAEA,UAAM,WAAW,SAAS,OAAO,MAAM;AACrC,UAAI,IAAI,KAAK,SAAS,SAAS;AAC/B,UAAI,IAAI,KAAK;AACb,UAAI,QAAQ,KAAK;AACjB,UAAI,QAAQ,KAAK;AACjB,UAAI,WAAW,KAAK;AACpB,UAAI,YAAY,KAAK;AAGrB,UAAI,UAAU,CAAE,IAAK;AAGrB,WAAK,cAAc;AACnB,WAAK,SAAS,KAAK,SAAS,QAAQ,EAAE,CAAC,IAAI;AAC3C,WAAK,WAAW;AAChB,eAAS,KAAK,IAAI;AAGlB,UAAI,aAAa,CAAC;AAGlB,aAAM,QAAQ,SAAS,GAAG;AAExB,YAAI,OAAO,QAAQ,IAAI;AACvB,YAAI,YAAY,KAAK;AACrB,YAAI,UAAU,KAAK;AACnB,YAAI,WAAW,UAAU,QAAQ,CAAC;AAClC,YAAG,WAAW,GAAG;AACf;AAAA,QACF;AAEA,iBAAQ,IAAE,GAAG,KAAG,GAAG,EAAE,GAAG;AACtB,cAAG,MAAM,UAAU;AACjB;AAAA,UACF;AAGA,cAAI,WAAW,QAAQ,CAAC;AACxB,cAAG,CAAC,SAAS,YAAY,SAAS,eAAe,GAAG;AAClD;AAAA,UACF;AAEA,cAAI,KAAK,SAAS;AAGlB,cAAG,SAAS,gBAAgB,CAAC,GAAG;AAE9B,gBAAI,cAAc;AAClB,qBAAQ,IAAE,GAAG,KAAG,GAAG,EAAE,GAAG;AACtB,kBAAG,GAAG,CAAC,IAAI,GAAG;AACZ,8BAAc;AACd,sBAAM,CAAC,IAAI;AAAA,cACb,OAAO;AACL,sBAAM,CAAC,IAAI,MAAM,GAAG,CAAC,CAAC;AAAA,cACxB;AAAA,YACF;AACA,gBAAI,IAAI,KAAK,OAAO;AAGpB,gBAAG,IAAI,GAAG;AACR,iBAAG,WAAW,IAAI;AAClB,uBAAS,WAAW;AACpB,uBAAS,KAAK,QAAQ;AACtB,sBAAQ,KAAK,QAAQ;AACrB,uBAAS,cAAc;AACvB;AAAA,YACF,OAAO;AACL,uBAAS,cAAc,CAAC;AAAA,YAC1B;AAAA,UACF;AAEA,cAAI,KAAK,SAAS;AAGlB,cAAI,SAAS,UAAU,MAAM;AAC7B,cAAI,OAAO,QAAQ,MAAM;AACzB,cAAI,QAAQ,IAAI,QAAQ,QAAQ,MAAM,IAAI;AAC1C,oBAAU,KAAK,KAAK;AAGpB,cAAI,WAAW,GAAG,QAAQ,IAAI;AAC9B,cAAG,WAAW,GAAG;AACf;AAAA,UACF;AACA,aAAG,QAAQ,IAAI;AACf,eAAK,QAAQ,IAAI;AAGjB,iBAAO,CAAC,IAAI;AACZ,eAAK,CAAC,IAAI;AACV,kBAAQ,CAAC,IAAI;AAGb,gBAAM,KAAK;AAGX,mBAAQ,IAAE,GAAG,KAAG,GAAG,EAAE,GAAG;AACtB,gBAAI,KAAK,OAAO,CAAC;AACjB,gBAAG,KAAK,KAAK,OAAO,GAAG;AACrB;AAAA,YACF;AACA,gBAAI,QAAQ,IAAI,MAAM,IAAE,CAAC;AACzB,gBAAI,OAAO;AACX,qBAAQ,IAAE,GAAG,KAAG,GAAG,EAAE,GAAG;AACtB,kBAAI,KAAK,OAAO,CAAC;AACjB,kBAAG,KAAK,KAAK,MAAM,GAAG;AACpB;AAAA,cACF;AACA,oBAAM,MAAM,IAAI;AAAA,YAClB;AACA,uBAAW,KAAK,IAAI,UAAU,OAAO,OAAO,CAAC,CAAC;AAAA,UAChD;AAAA,QACF;AAAA,MACF;AAGA,iBAAW,KAAK,WAAW;AAE3B,eAAQ,IAAE,GAAG,IAAE,IAAE,WAAW,QAAQ,KAAG,GAAG;AACxC,YAAI,IAAI,WAAW,CAAC;AACpB,YAAI,IAAI,WAAW,IAAE,CAAC;AACtB,YAAI,KAAK,EAAE;AACX,YAAI,KAAK,EAAE;AACX,YAAG,KAAK,KAAK,KAAK,GAAG;AACnB;AAAA,QACF;AACA,UAAE,KAAK,SAAS,EAAE,KAAK,IAAI,EAAE;AAC7B,UAAE,KAAK,SAAS,EAAE,KAAK,IAAI,EAAE;AAAA,MAC/B;AAAA,IACF;AAEA,UAAM,SAAS,SAAS,OAAO,QAAQ;AAErC,UAAI,QAAQ,KAAK;AACjB,YAAM,KAAK,KAAK;AAEhB,UAAI,OAAO,KAAK,KAAK,OAAO,MAAM;AAClC,UAAG,CAAC,MAAM;AACR;AAAA,MACF;AAGA,UAAI,IAAI,KAAK;AACb,UAAI,QAAQ,KAAK;AAGjB,eAAQ,IAAE,GAAG,KAAG,GAAG,EAAE,GAAG;AACtB,YAAI,KAAK,KAAK,SAAS,CAAC;AACxB,YAAG,KAAK,GAAG;AACT,gBAAM,CAAC,IAAI;AAAA,QACb,OAAO;AACL,gBAAM,CAAC,IAAI,MAAM,EAAE;AAAA,QACrB;AAAA,MACF;AACA,UAAI,IAAI,KAAK,OAAO,KAAK;AACzB,UAAG,IAAI,GAAG;AACR;AAAA,MACF,WAAU,MAAM,GAAG;AACjB,eAAO,KAAK,yBAAyB,MAAM,KAAK;AAChD,YAAG,CAAC,MAAM;AACR;AAAA,QACF;AAAA,MACF;AAGA,WAAK,SAAS,OAAO,IAAI;AAAA,IAC3B;AAGA,UAAM,WAAW,WAAW;AAC1B,UAAI,IAAI,KAAK;AACb,UAAI,WAAW,CAAC;AAChB,UAAI,QAAQ,KAAK;AACjB,UAAI,KAAK,MAAM;AACf,eAAQ,IAAE,GAAG,IAAE,IAAI,EAAE,GAAG;AACtB,YAAI,IAAI,MAAM,CAAC;AACf,YAAG,EAAE,UAAU;AACb,cAAI,QAAQ,IAAI,MAAM,CAAC;AACvB,cAAI,KAAK,EAAE;AACX,cAAI,MAAM;AACV,cAAI,SAAS;AACb,mBAAQ,IAAE,GAAG,KAAG,GAAG,EAAE,GAAG;AACtB,gBAAG,GAAG,CAAC,KAAK,GAAG;AACb,oBAAM,KAAK,IAAI,GAAG,CAAC;AAAA,YACrB,OAAO;AACL,uBAAS,IAAE;AAAA,YACb;AAAA,UACF;AACA,cAAG,YAAY,IAAE,IAAI;AACnB,gBAAI,IAAI,MAAM,CAAC;AACf,kBAAM,CAAC,IAAI,MAAM,CAAC;AAClB,kBAAM,CAAC,IAAI;AAAA,UACb;AACA,mBAAS,KAAK,KAAK;AAAA,QACrB;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAEA,aAAS,sBAAsB,QAAQ,cAAc;AACnD,UAAI,IAAI,OAAO;AACf,UAAG,MAAM,GAAG;AACV,cAAM,IAAI,MAAM,+BAA+B;AAAA,MACjD;AACA,UAAI,IAAI,OAAO,CAAC,EAAE;AAClB,UAAG,KAAK,GAAG;AACT,cAAM,IAAI,MAAM,gCAAgC;AAAA,MAClD;AAGA,UAAI,iBAAiB,OAAO,MAAM,GAAG,IAAE,CAAC;AAGxC,UAAI,IAAI,OAAO,MAAM,QAAQ,cAAc;AAC3C,UAAG,MAAM,GAAG;AACV,cAAM,IAAI,MAAM,+BAA+B;AAAA,MACjD;AACA,UAAI,gBAAgB,IAAI,MAAM,IAAE,CAAC;AACjC,eAAQ,IAAE,GAAG,KAAG,GAAG,EAAE,GAAG;AACtB,sBAAc,CAAC,IAAI;AAAA,MACrB;AACA,UAAG,IAAI,GAAG;AACR,sBAAc,CAAC,IAAI;AACnB,sBAAc,CAAC,IAAI;AAAA,MACrB;AAGA,UAAI,cAAc,IAAI,QAAQ,eAAe,IAAI,MAAM,IAAE,CAAC,GAAG,KAAK;AAClE,UAAI,WAAW,YAAY;AAC3B,UAAI,OAAO,IAAI,MAAM,IAAE,CAAC;AACxB,eAAQ,IAAE,GAAG,KAAG,GAAG,EAAE,GAAG;AACtB,YAAI,QAAQ,cAAc,MAAM;AAChC,iBAAQ,IAAE,GAAG,KAAG,GAAG,EAAE,GAAG;AACtB,cAAG,MAAM,GAAG;AACV,kBAAM,CAAC,IAAI;AAAA,UACb;AAAA,QACF;AACA,YAAI,IAAI,MAAM,CAAC;AACf,cAAM,CAAC,IAAI,MAAM,CAAC;AAClB,cAAM,CAAC,IAAI;AACX,YAAI,OAAO,IAAI,QAAQ,OAAO,IAAI,MAAM,IAAE,CAAC,GAAG,IAAI;AAClD,iBAAS,CAAC,IAAI;AACd,aAAK,CAAC,IAAI;AAAA,MACZ;AACA,WAAK,IAAE,CAAC,IAAI;AACZ,eAAQ,IAAE,GAAG,KAAG,GAAG,EAAE,GAAG;AACtB,YAAI,QAAQ,SAAS,CAAC,EAAE;AACxB,YAAI,MAAM,SAAS,CAAC,EAAE;AACtB,iBAAQ,IAAE,GAAG,KAAG,GAAG,EAAE,GAAG;AACtB,cAAI,IAAI,MAAM,CAAC;AACf,cAAG,IAAI,GAAG;AACR,gBAAI,CAAC,IAAI;AACT;AAAA,UACF;AACA,mBAAQ,IAAE,GAAG,KAAG,GAAG,EAAE,GAAG;AACtB,gBAAG,SAAS,CAAC,EAAE,SAAS,QAAQ,CAAC,IAAI,GAAG;AACtC,kBAAI,CAAC,IAAI,SAAS,CAAC;AAAA,YACrB;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAGA,UAAI,YAAY,IAAI,cAAc,GAAG,gBAAgB,IAAI;AAGzD,UAAI,YAAY,CAAC,CAAC;AAClB,eAAQ,IAAE,IAAE,GAAG,IAAE,GAAG,EAAE,GAAG;AACvB,kBAAU,OAAO,OAAO,CAAC,GAAG,SAAS;AAAA,MACvC;AAGA,aAAO,UAAU,SAAS;AAAA,IAC5B;AAAA;AAAA;;;AC7bA;AAAA;AAAA;AAEA,WAAO,UAAU;AAEjB,QAAI,SAAS;AAEb,aAAS,oBAAoB,QAAQ,GAAG;AACtC,UAAI,QAAQ,IAAI,MAAM,IAAE,CAAC;AACzB,eAAQ,IAAE,GAAG,IAAE,OAAO,QAAQ,EAAE,GAAG;AACjC,cAAM,CAAC,IAAI,OAAO,CAAC;AAAA,MACrB;AACA,eAAQ,IAAE,GAAG,KAAG,OAAO,QAAQ,EAAE,GAAG;AAClC,iBAAQ,IAAE,OAAO,QAAQ,KAAG,GAAG,EAAE,GAAG;AAClC,cAAI,IAAI,IAAI,MAAM,CAAC;AACnB,mBAAQ,IAAE,GAAG,IAAE,GAAG,EAAE,GAAG;AACrB,cAAE,CAAC,IAAI,KAAK,IAAI,IAAE,IAAE,GAAG,CAAC;AAAA,UAC1B;AACA,gBAAM,CAAC,IAAI;AAAA,QACb;AACA,YAAI,IAAI,OAAO,MAAM,QAAQ,KAAK;AAClC,YAAG,GAAG;AACJ,iBAAO;AAAA,QACT;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAEA,aAAS,WAAW,QAAQ;AAC1B,UAAI,IAAI,OAAO;AACf,UAAG,MAAM,GAAG;AACV,eAAO,CAAC;AAAA,MACV;AACA,UAAG,MAAM,GAAG;AACV,eAAO,CAAC,CAAC;AAAA,MACX;AACA,UAAI,IAAI,OAAO,CAAC,EAAE;AAClB,UAAI,QAAQ,CAAE,OAAO,CAAC,CAAE;AACxB,UAAI,QAAQ,CAAE,CAAE;AAChB,eAAQ,IAAE,GAAG,IAAE,GAAG,EAAE,GAAG;AACrB,cAAM,KAAK,OAAO,CAAC,CAAC;AACpB,YAAG,CAAC,oBAAoB,OAAO,CAAC,GAAG;AACjC,gBAAM,IAAI;AACV;AAAA,QACF;AACA,cAAM,KAAK,CAAC;AACZ,YAAG,MAAM,WAAW,IAAE,GAAG;AACvB,iBAAO;AAAA,QACT;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAAA;AAAA;;;AClDA;AAAA;AAAA;AAEA,WAAO,UAAU;AAEjB,QAAI,MAAM;AACV,QAAI,MAAM;AAEV,aAAS,QAAQ,QAAQ,OAAO;AAC9B,UAAI,IAAI,OAAO;AACf,UAAI,UAAU,IAAI,MAAM,CAAC;AACzB,eAAQ,IAAE,GAAG,IAAE,MAAM,QAAQ,EAAE,GAAG;AAChC,gBAAQ,CAAC,IAAI,OAAO,MAAM,CAAC,CAAC;AAAA,MAC9B;AACA,UAAI,MAAM,MAAM;AAChB,eAAQ,IAAE,GAAG,IAAE,GAAG,EAAE,GAAG;AACrB,YAAG,MAAM,QAAQ,CAAC,IAAI,GAAG;AACvB,kBAAQ,KAAK,IAAI,OAAO,CAAC;AAAA,QAC3B;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAEA,aAAS,WAAW,OAAO,OAAO;AAChC,UAAI,KAAK,MAAM;AACf,UAAI,KAAK,MAAM;AACf,eAAQ,IAAE,GAAG,IAAE,IAAI,EAAE,GAAG;AACtB,YAAI,IAAI,MAAM,CAAC;AACf,iBAAQ,IAAE,GAAG,IAAE,EAAE,QAAQ,EAAE,GAAG;AAC5B,cAAI,IAAI,EAAE,CAAC;AACX,cAAG,IAAI,IAAI;AACT,cAAE,CAAC,IAAI,MAAM,CAAC;AAAA,UAChB,OAAO;AACL,gBAAI,IAAI;AACR,qBAAQ,IAAE,GAAG,IAAE,IAAI,EAAE,GAAG;AACtB,kBAAG,KAAK,MAAM,CAAC,GAAG;AAChB,qBAAK;AAAA,cACP;AAAA,YACF;AACA,cAAE,CAAC,IAAI;AAAA,UACT;AAAA,QACF;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAEA,aAAS,aAAa,QAAQ,GAAG;AAC/B,UAAI;AACF,eAAO,IAAI,QAAQ,IAAI;AAAA,MACzB,SAAQ,GAAG;AAET,YAAI,KAAK,IAAI,MAAM;AACnB,YAAG,GAAG,UAAU,GAAG;AAEjB,iBAAO,CAAC;AAAA,QACV;AACA,YAAI,UAAU,QAAQ,QAAQ,EAAE;AAChC,YAAI,QAAU,IAAI,SAAS,IAAI;AAC/B,eAAO,WAAW,OAAO,EAAE;AAAA,MAC7B;AAAA,IACF;AAAA;AAAA;;;AC3DA;AAAA;AAEA,QAAI,eAAe;AACnB,QAAI,eAAe;AACnB,QAAI,eAAe;AAEnB,WAAO,UAAU;AAEjB,aAAS,WAAW,QAAQ;AAC1B,UAAI,IAAI,OAAO;AACf,UAAG,MAAM,GAAG;AACV,eAAO,CAAC;AAAA,MACV,WAAU,MAAM,GAAG;AACjB,eAAO,CAAC,CAAC,CAAC,CAAC;AAAA,MACb;AACA,UAAI,IAAI,OAAO,CAAC,EAAE;AAClB,UAAG,MAAM,GAAG;AACV,eAAO,CAAC;AAAA,MACV,WAAU,MAAM,GAAG;AACjB,eAAO,aAAa,MAAM;AAAA,MAC5B,WAAU,MAAM,GAAG;AACjB,eAAO,aAAa,MAAM;AAAA,MAC5B;AACA,aAAO,aAAa,QAAQ,CAAC;AAAA,IAC/B;AAAA;AAAA;",
  "names": ["orientation3Exact", "orientation4Exact", "proc"]
}
